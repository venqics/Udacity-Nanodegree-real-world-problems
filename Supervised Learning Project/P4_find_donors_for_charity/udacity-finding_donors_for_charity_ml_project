{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"udacity-finding_donors_for_charity_ml_project","provenance":[],"authorship_tag":"ABX9TyMZ9RGN10LhQKIrbUEPruDZ"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"26Nh6Z7Wvo08","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"oirRdmC9x7OC","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"midaaIgNx-Nr","colab_type":"code","outputId":"2afe303f-4d94-4f8c-e01c-01dedc22afe8","executionInfo":{"status":"ok","timestamp":1579336083676,"user_tz":-330,"elapsed":30845,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}},"colab":{"base_uri":"https://localhost:8080/","height":122}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"bKMkSnaCx_N_","colab_type":"code","colab":{}},"source":["\"\"\"\n","Note that the last column from this dataset, 'income', will be our target label \n","(whether an individual makes more than, or at most, $50,000 annually). \n","All other columns are features about each individual in the census database.\n","\n","\"\"\"\n","\n","# Import libraries necessary for this project\n","\n","\n","import numpy as np\n","import pandas as pd\n","from time import time\n","from IPython.display import display # Allows the use of display() for DataFrames"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"c5vvSQZiybjM","colab_type":"code","colab":{}},"source":["# Pretty display for notebooks\n","import matplotlib.pyplot as pl\n","import matplotlib.patches as mpatches\n","\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","%matplotlib inline\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"hyHhvOgqyk_E","colab_type":"code","colab":{}},"source":["# Load the Census dataset\n","df = pd.read_csv(\"/content/drive/My Drive/census.csv\")\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"vlq2HoRQzkzx","colab_type":"code","outputId":"e8b2ffb9-6fe0-4a2f-fab8-979b97e62d75","executionInfo":{"status":"ok","timestamp":1579336103444,"user_tz":-330,"elapsed":956,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}},"colab":{"base_uri":"https://localhost:8080/","height":306}},"source":["#Display first five records\n","\n","df.head()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>workclass</th>\n","      <th>education_level</th>\n","      <th>education-num</th>\n","      <th>marital-status</th>\n","      <th>occupation</th>\n","      <th>relationship</th>\n","      <th>race</th>\n","      <th>sex</th>\n","      <th>capital-gain</th>\n","      <th>capital-loss</th>\n","      <th>hours-per-week</th>\n","      <th>native-country</th>\n","      <th>income</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>39</td>\n","      <td>State-gov</td>\n","      <td>Bachelors</td>\n","      <td>13.0</td>\n","      <td>Never-married</td>\n","      <td>Adm-clerical</td>\n","      <td>Not-in-family</td>\n","      <td>White</td>\n","      <td>Male</td>\n","      <td>2174.0</td>\n","      <td>0.0</td>\n","      <td>40.0</td>\n","      <td>United-States</td>\n","      <td>&lt;=50K</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>50</td>\n","      <td>Self-emp-not-inc</td>\n","      <td>Bachelors</td>\n","      <td>13.0</td>\n","      <td>Married-civ-spouse</td>\n","      <td>Exec-managerial</td>\n","      <td>Husband</td>\n","      <td>White</td>\n","      <td>Male</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>13.0</td>\n","      <td>United-States</td>\n","      <td>&lt;=50K</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>38</td>\n","      <td>Private</td>\n","      <td>HS-grad</td>\n","      <td>9.0</td>\n","      <td>Divorced</td>\n","      <td>Handlers-cleaners</td>\n","      <td>Not-in-family</td>\n","      <td>White</td>\n","      <td>Male</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>40.0</td>\n","      <td>United-States</td>\n","      <td>&lt;=50K</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>53</td>\n","      <td>Private</td>\n","      <td>11th</td>\n","      <td>7.0</td>\n","      <td>Married-civ-spouse</td>\n","      <td>Handlers-cleaners</td>\n","      <td>Husband</td>\n","      <td>Black</td>\n","      <td>Male</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>40.0</td>\n","      <td>United-States</td>\n","      <td>&lt;=50K</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>28</td>\n","      <td>Private</td>\n","      <td>Bachelors</td>\n","      <td>13.0</td>\n","      <td>Married-civ-spouse</td>\n","      <td>Prof-specialty</td>\n","      <td>Wife</td>\n","      <td>Black</td>\n","      <td>Female</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>40.0</td>\n","      <td>Cuba</td>\n","      <td>&lt;=50K</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   age          workclass  ...  native-country  income\n","0   39          State-gov  ...   United-States   <=50K\n","1   50   Self-emp-not-inc  ...   United-States   <=50K\n","2   38            Private  ...   United-States   <=50K\n","3   53            Private  ...   United-States   <=50K\n","4   28            Private  ...            Cuba   <=50K\n","\n","[5 rows x 14 columns]"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"3zGpW4Wkzrmq","colab_type":"code","outputId":"04e3ae01-cf51-47a8-d11b-079f364ed090","executionInfo":{"status":"ok","timestamp":1579336106957,"user_tz":-330,"elapsed":1713,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}},"colab":{"base_uri":"https://localhost:8080/","height":102}},"source":["df.columns"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['age', 'workclass', 'education_level', 'education-num',\n","       'marital-status', 'occupation', 'relationship', 'race', 'sex',\n","       'capital-gain', 'capital-loss', 'hours-per-week', 'native-country',\n","       'income'],\n","      dtype='object')"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"id":"lf-8u0lLzxqC","colab_type":"code","outputId":"4f2004f9-483b-4b1b-b749-e2346ff61830","executionInfo":{"status":"ok","timestamp":1579336108477,"user_tz":-330,"elapsed":1336,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}},"colab":{"base_uri":"https://localhost:8080/","height":340}},"source":["df.info()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 45222 entries, 0 to 45221\n","Data columns (total 14 columns):\n","age                45222 non-null int64\n","workclass          45222 non-null object\n","education_level    45222 non-null object\n","education-num      45222 non-null float64\n","marital-status     45222 non-null object\n","occupation         45222 non-null object\n","relationship       45222 non-null object\n","race               45222 non-null object\n","sex                45222 non-null object\n","capital-gain       45222 non-null float64\n","capital-loss       45222 non-null float64\n","hours-per-week     45222 non-null float64\n","native-country     45222 non-null object\n","income             45222 non-null object\n","dtypes: float64(4), int64(1), object(9)\n","memory usage: 4.8+ MB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"bydPxxtvz2Ll","colab_type":"code","colab":{}},"source":["\"\"\"\n","Implementation: Data Exploration\n","\n","A cursory investigation of the dataset will determine how many individuals fit into either group,\n","and will tell us about the percentage of these individuals making more than $50,000. \n","In the code cell below, you will need to compute the following:\n","\n","The total number of records, 'n_records'\n","The number of individuals making more than $50,000 annually, 'n_greater_50k'.\n","The number of individuals making at most $50,000 annually, 'n_at_most_50k'.\n","The percentage of individuals making more than $50,000 annually, 'greater_percent'.\n","** HINT: ** You may need to look at the table above to understand how the \n","            'income' entries are formatted."],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"QvCdjFLz0P1x","colab_type":"code","outputId":"6a571b64-98b9-4101-9c47-e5fdaff820d2","executionInfo":{"status":"ok","timestamp":1579336118099,"user_tz":-330,"elapsed":797,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["# TODO: Total number of records\n","n_records = len(df)\n","\n","# TODO: Number of records where individual's income is more than $50,000\n","n_greater_50k = np.sum(df['income'] == '>50K')\n","\n","# TODO: Number of records where individual's income is at most $50,000\n","n_at_most_50k = np.sum(df['income'] == '<=50K')\n","\n","# TODO: Percentage of individuals whose income is more than $50,000\n","greater_percent = n_greater_50k / n_records * 100\n","\n","# Print the results\n","print(\"Total number of records: {}\".format(n_records))\n","print(\"Individuals making more than $50,000: {}\".format(n_greater_50k))\n","print(\"Individuals making at most $50,000: {}\".format(n_at_most_50k))\n","print(\"Percentage of individuals making more than $50,000: {}%\".format(greater_percent))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Total number of records: 45222\n","Individuals making more than $50,000: 11208\n","Individuals making at most $50,000: 34014\n","Percentage of individuals making more than $50,000: 24.78439697492371%\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"MptMU54D0qvn","colab_type":"code","colab":{}},"source":["\"\"\"\n","** Featureset Exploration **\n","\n","age: continuous.\n","workclass: Private, Self-emp-not-inc, Self-emp-inc, Federal-gov, Local-gov, \n","State-gov, Without-pay, Never-worked.\n","education: Bachelors, Some-college, 11th, HS-grad, Prof-school, Assoc-acdm, \n","Assoc-voc, 9th, 7th-8th, 12th, Masters, 1st-4th, 10th, Doctorate, 5th-6th, Preschool.\n","education-num: continuous.\n","marital-status: Married-civ-spouse, Divorced, Never-married, Separated, Widowed, \n","Married-spouse-absent, Married-AF-spouse.\n","occupation: Tech-support, Craft-repair, Other-service, Sales, Exec-managerial, \n","Prof-specialty, Handlers-cleaners, Machine-op-inspct, Adm-clerical, Farming-fishing, \n","Transport-moving, Priv-house-serv, Protective-serv, Armed-Forces.\n","relationship: Wife, Own-child, Husband, Not-in-family, Other-relative, Unmarried.\n","race: Black, White, Asian-Pac-Islander, Amer-Indian-Eskimo, Other.\n","sex: Female, Male.\n","capital-gain: continuous.\n","capital-loss: continuous.\n","hours-per-week: continuous.\n","native-country: United-States, Cambodia, England, Puerto-Rico, Canada, Germany, \n","Outlying-US(Guam-USVI-etc), India, Japan, Greece, South, China, Cuba, Iran, Honduras, \n","Philippines, Italy, Poland, Jamaica, Vietnam, Mexico, Portugal, Ireland, France, \n","Dominican-Republic, Laos, Ecuador, Taiwan, Haiti, Columbia, Hungary, Guatemala, \n","Nicaragua, Scotland, Thailand, Yugoslavia, El-Salvador, Trinadad&Tobago, Peru, Hong, \n","Holand-Netherlands.\n","\n","\"\"\""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"m9t3P5M1OkHP","colab_type":"code","outputId":"55125bd9-311c-4c6e-8d27-0c8903c6c13f","executionInfo":{"status":"ok","timestamp":1579336140956,"user_tz":-330,"elapsed":6940,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["f, ax1 = plt.subplots(figsize=(15, 5), nrows=2)\n","sns.countplot(x=\"age\", hue=\"income\", data=df, ax=ax1[0])\n","sns.countplot(x=\"income\", hue=\"education_level\", data=df, ax=ax1[1])\n","plt.tight_layout()\n","\n","f, ax2 = plt.subplots(figsize=(15, 10), ncols=2, nrows=3)\n","sns.barplot(x='income', y='capital-gain', data=df, ax=ax2[0][0])\n","sns.barplot(x='income', y='capital-loss', data=df, ax=ax2[0][1])\n","sns.countplot(x=\"income\", hue=\"sex\", data=df, ax=ax2[1][0])\n","sns.countplot(x=\"income\", hue=\"race\", data=df, ax=ax2[1][1])\n","sns.countplot(x=\"income\", hue=\"marital-status\", data=df, ax=ax2[2][0])\n","\n","plt.tight_layout()\n"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAABC8AAAFfCAYAAABuq+ZbAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjIsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy8li6FKAAAgAElEQVR4nOzdeXgUVb4+8PfbnX0hZIEICRKWJCQh\nBNlHRwVBXK6KsgguoyAqiziI3lHvdX7KOOrVETdUZHCBQXFEmWEZRRRR0BFFEyCQPSwBQghrFrKn\nu8/vj+5kmqSrqrMHeD/Pw2O6ut46pypfu6pPTleLUgpERERERERERJ2VqaM7QERERERERESkh4MX\nRERERERERNSpcfCCiIiIiIiIiDo1Dl4QERERERERUafGwQsiIiIiIiIi6tQ8OroD7S0sLExFRUV1\ndDeIiIiIiIiIqIGUlJRTSqluDZdfdIMXUVFRSE5O7uhuEBEREREREVEDInLI1XJ+bISIiIiIiIiI\nOrWLbuYFtY6hf1jpcnnKy/e0c0+IiIiIiIjoQseZF0RERERERETUqXHmBREREREREVEbqK2tRX5+\nPqqqqjq6K52Oj48PIiMj4enp6db6HLwgIiIiIiIiagP5+fkIDAxEVFQURKSju9NpKKVw+vRp5Ofn\no0+fPm5l+LERIiIiIiIiojZQVVWF0NBQDlw0ICIIDQ1t0owUDl4QERERERERtREOXLjW1OPCwQsi\nIiIiIiIi6tR4zwtqV66+YpVfr0pERERERKTv8ssvx/bt2zu6Gx2mQwYvROQDADcBOKGUGuhYFgJg\nNYAoAHkAbldKFYl9LskbAG4EUAFgulJqpyNzL4A/Ojb7nFLqb+25H9R+OOhBREREREQXs4t54ALo\nuJkXKwC8BcD5HemTALYopV4UkScdj58AcAOAaMe/kQDeATDSMdjxDIBhABSAFBHZoJQqare9oAsS\nB0qIiIiIiKizCQgIQFlZGbZu3YqFCxciLCwMaWlpGDp0KD766COICH799VfMnz8f5eXl8Pb2xpYt\nW+Dp6Yk5c+YgOTkZHh4eePXVVzFmzBisWLEC69atQ3l5OXJzc/Hf//3fqKmpwYcffghvb29s3LgR\nISEh2L9/Px566CGcPHkSfn5+ePfddzFgwIB23/8OGbxQSn0vIlENFk8AMNrx898AbIV98GICgJVK\nKQXgZxHpKiI9HOtuVkqdAQAR2QzgegB/b+PuX3D4Zr3lXB1DgMeRiIiIiIha365du5Ceno6ePXvi\niiuuwI8//ogRI0Zg6tSpWL16NYYPH47S0lL4+vrijTfegIhg7969yMrKwvjx45GTkwMASEtLw65d\nu1BVVYX+/fvjpZdewq5du7BgwQKsXLkSjzzyCB588EEsXboU0dHR2LFjB+bOnYtvv/223fe5M93z\nIlwpdczxcyGAcMfPEQCOOK2X71imtbwREXkQwIMAcOmll7Zil6kz44DCudrzePDYExERERG1nREj\nRiAyMhIAMHjwYOTl5SEoKAg9evTA8OHDAQBdunQBAPz73//Gww8/DAAYMGAAevfuXT94MWbMGAQG\nBiIwMBBBQUG4+eabAQCJiYnYs2cPysrKsH37dkyZMqW+7erq6nbbT2edafCinlJKiYhqxe0tA7AM\nAIYNG9Zq2yXqKJwtQ0RERER08fL29q7/2Ww2w2KxtHg7JpOp/rHJZILFYoHNZkPXrl2xe/fulnW4\nFXSmr0o97vg4CBz/PeFYfhRAL6f1Ih3LtJYTnTeG/mFlo39ERERERERNFRsbi2PHjuHXX38FAJw9\nexYWiwVXXnklVq1aBQDIycnB4cOHERsb69Y2u3Tpgj59+uCzzz4DACilkJqa2jY7YKAzzbzYAOBe\nAC86/rveafk8EfkE9ht2liiljonIVwBeEJFgx3rjAfxPO/e5U+FUfboYse6JiIiIiAAvLy+sXr0a\nDz/8MCorK+Hr64tvvvkGc+fOxZw5c5CYmAgPDw+sWLHinBkXRlatWoU5c+bgueeeQ21tLaZNm4ak\npKQ23BPXOuqrUv8O+w03w0QkH/ZvDXkRwKciMhPAIQC3O1bfCPvXpO6D/atSZwCAUuqMiPwZwK+O\n9Z6tu3nnhYAfCyAiIiIiIqI6ZWVlAIDRo0dj9OjR9cvfeuut+p+HDx+On3/+uVF2+fLljZZNnz4d\n06dPr3+cl5fn8rk+ffpg06ZNLet8K+iobxu5Q+OpsS7WVQAe0tjOBwA+aMWuEVED7TmQdqG2RURE\nRERELdOie16IyBZ3lhERERERERERNVezZl6IiA8AP9g/9hEMQBxPdYHG15VerPh5fCIiIiIiIqKW\nae7HRmYBeARATwAp+M/gRSmAt7RCRERERERERERN1azBC6XUGwDeEJGHlVJvtnKfiIg6rebcK4Mz\nsIiIiIiIWqZFN+xUSr0pIpcDiHLellLK9ZU6EREREREREVETtWjwQkQ+BNAPwG4AVsdiBYCDF0RE\nREREREROtGbkNld7zOTdunUrJkyYgD59+gAAJk6ciKeffhoAsGnTJsyfPx9WqxX3338/nnzySQD2\nr3NdtGgRhg0bhoMHD2L8+PF46623cN111zW7Hy39qtRhAOIdX2dKREStqD0/osKvjiUiIiK6eNTU\n1KC2thb+/v5urX/llVfi888/P2eZ1WrFQw89hM2bNyMyMhLDhw/HLbfcgvj4+Pp18vPzcf311+OV\nV15p0cAF0MKvSgWQBuCSFm6DiIiIiIiIiNpYZmYmHnvsMcTGxiInJ6dF2/rll1/Qv39/9O3bF15e\nXpg2bRrWr19f//yxY8cwfvx4PP/887jlllta2vUWz7wIA5AhIr8AqK5bqJRqec+IiKjT44wNIiIi\nos6tvLwcn376Kd5//30AwIwZM7Bw4UIEBgYCABYsWIDvvvuuUW7atGn1HwP56aefkJSUhJ49e2LR\nokVISEjA0aNH0atXr/r1IyMjsWPHjvrH9957L5577jlMnjy5VfajpYMXC1ujE+cLXqQTERERERHR\n+aRHjx4YNGgQ3nvvPQwYMKDR86+99ppufsiQITh06BACAgKwceNG3HrrrcjNzTVsd9y4cfjoo48w\nffp0+Pn5Nbv/dVr6bSPbWtwDIiK6qPCrY4mIiIjaz5o1a/D+++9j4sSJmDZtGu6991707t27/nmj\nmRddunSpX3bjjTdi7ty5OHXqFCIiInDkyJH65/Lz8xEREVH/+PHHH8eHH36IKVOmYP369fDwaNnc\niZZ+28hZ2L9dBAC8AHgCKFdKddFOERERtQ8OlBAREdHFbvz48Rg/fjxOnz6Njz76CBMmTEBYWBje\ne+89REVFGc68KCwsRHh4OEQEv/zyC2w2G0JDQ9G1a1fk5ubi4MGDiIiIwCeffIKPP/74nOzrr7+O\nO++8EzNnzsSKFSsgIs3ej5bOvAis+1nsvZgAYFRLtklERORKe350rz2/6YWIiIguHh15XRAaGor5\n8+dj/vz5+OWXX2A2m93KrVmzBu+88w48PDzg6+uLTz75BCICDw+P+q8/tVqtuO+++5CQkHBOVkTw\nt7/9DTfddBMef/xxvPzyy83uf0vveVHP8XWp60TkGQBPttZ2iYiIiIiIiKj1jBgxwu11582bh3nz\n5rl87sYbb8SNN97YaPnWrVvrf/by8sLXX3/d5D421NKPjUx0emgCMAxAVYt6RERERERERETkpKUz\nL252+tkCIA/2j440m4jkATgLwArAopQaJiIhAFYDiHK0cbtSqsjxUZU3ANwIoALAdKXUzpa0T0RE\nRERERESdS0vveTGjtTrSwBil1Cmnx08C2KKUelFEnnQ8fgLADQCiHf9GAnjH8V8iIiIiIiIiukCY\nWhIWkUgRWSsiJxz//iEika3VOScTAPzN8fPfANzqtHylsvsZQFcR6dEG7RMRERERERFRB2npx0aW\nA/gYwBTH47sdy65twTYVgK9FRAH4q1JqGYBwpdQxx/OFAMIdP0cAOOKUzXcsO+a0DCLyIIAHAeDS\nSy9tQdeIiIg6h87+7StEREREramlgxfdlFLLnR6vEJFHWrjN3yqljopIdwCbRSTL+UmllHIMbLjN\nMQCyDACGDRumeBFGRESdBc9JRERERMZaOnhxWkTuBvB3x+M7AJxuyQaVUkcd/z0hImsBjABwXER6\nKKWOOT4WcsKx+lEAvZzikY5lRERE1ICrgRKAgyVERETt5fCzia26vUuf3tvibUyfPh3btm1DUFAQ\nAGDFihUYPHgwlFKYP38+Nm7cCD8/P6xYsQJDhgxBXl4ebrrpJqSlpQEA3n33XSxduhTffPMNgoOD\nW9wfLS0dvLgPwJsAXoP94x7bAUxv7sZExB+ASSl11vHzeADPAtgA4F4ALzr+u94R2QBgnoh8AvuN\nOkucPl5CREREHYQDJURERJ1DUVGR4aDCyy+/jMmTJ5+z7Msvv0Rubi5yc3OxY8cOzJkzBzt27Dhn\nnQ8//BBvvvkmvv322zYduABaPnjxLIB7lVJFAOD4StNFsA9qNEc4gLX2b0CFB4CPlVKbRORXAJ+K\nyEwAhwDc7lh/I+xfk7oP9q9KbatvPyEi6hS0RutbY9S9I9s6HzT3eLjKXazHkIiIiNrfsGHDMGrU\nKMycORNjxoyB4/22ofXr1+Oee+6BiGDUqFEoLi7GsWP/mSvw6aef4sUXX8SWLVsQFhbWVt2v19LB\ni0F1AxcAoJQ6IyKXNXdjSqkDAJJcLD8NYKyL5QrAQ81tj4ioNTT3zemF+qa2PY8HBxQuPLwHCBER\ntVRtbS3y8/NRVVXV0V1BbW0tMjMz6x9brn29VbfvvG0t//rXv1BVVYWysjJ8++238Pf3R0BAAMxm\nMwBg5syZqK6uxpYtW+Dj44Pg4GCICO6880506dKlvo2//vWvOH78OMxmM1555RWICD755BMUFRWh\nqKhIrwsu+fj4wP6W3j0tHbwwiUhwg5kXLd0mEVGHuJBnGvDNOlFj/GgLEdGFKT8/H4GBgYiKinJ7\nlkFbqayshK+vb/3j6gJbq27fu2dck9avra3F0aNHcerUKcTFxcHf3x81NTXw9PSEUgqHDh2Ct7c3\nevbsCQ8PD1xyySUIDAwEAJhMJkRGRsLDw/6W32w2IzQ0FOHh4XpNuqSUwunTp1FWVuZ2pqUDDa8A\n+ElEPnM8ngLg+RZuk4iIiNoRB7eahrNDiIg6t6qqqk4xcNGZWCwWFBUV4dSpUxARREVF1Q+qeHl5\nAQBEBGFhYSgsLKxfXlNTU7+N2tra+kEOk8mE6OhoZGdnw8PDA6GhoU3qj4ggNDQUBQUFbmdaNHih\nlFopIskArnEsmqiUymjJNomInF3IsyGIzmed6f9NzqAgIqKGOHDxHwcOHEB5eTmCg4PRp08f+Pj4\nnPN8TU0NvLy8oJRCUVFR/aBGUFAQTpw4gZCQEJSXl8NsNsPLywvV1dUAAE9Pz3MGMOq+rcRdTf0d\ntfgjHo7BCg5YEFGnwr8k0/msMw0MUOto7gALZ3kQEV1YvHsmtHubISEh6NOnj+ZgwcGDB2GxWAAA\nvr6+6N27NwD74EVJSQnS0tJgMpkQFRXVKOvt7Y3+/fsjNzcX/fv3h7+/f5vtB+9PQURNxjdWRJ0T\nB+0I4EwUIiI6V9euXXWfj42NdblcROoHMpx5e3sjIeE/gzB+fn5ISmr0vRutjoMXRBe59nyzwzdW\nRNQcHDBtH82d5cHZIUR0sVmxYgWSk5Px1ltvtdo2161bh5iYGMTHxwMAnn76aVx11VUYN25cq2y/\nLfrcFtvUw8ELIiIiajccxCQiImps3bp1uOmmm+oHL5599tkO7lHnY+roDhBR6zj8bGKjf0REFzO+\nLnZeQ/+w0uU/IqLO4KOPPsKIESMwePBgzJo1C1arFcuXL0dMTAxGjBiBH3/8sX7d6dOnY82aNfWP\nAwIC6n9+6aWXMHz4cCQlJeHJJ58EALz77rv1yyZNmoSKigps374dGzZswB/+8AcMHjwY+/fvP2e7\nW7ZswWWXXYbExETcd9999TfMjIqKwjPPPIMhQ4YgMTERWVlZbu3fyZMnMWnSJAwfPhzDhw/Hjz/+\nCJvNhqioKBQXF9evFx0djePHj7tcvzUopZq0PmdeEBEREdEFi/cAIaKmyMzMxOrVq/Hjjz/C09MT\nc+fOxUcffYRnnnkGKSkpCAoKwpgxY3DZZZfpbufLL7/E+vXr8cMPPyAgIAClpaUAgIkTJ+KBBx4A\nAPzxj3/E+++/j4cffhi33HILbrrpJkyePPmc7VRVVWH69OnYsmULYmJicM899+Cdd97BI488AgAI\nCwvDzp07sWTJEixatAjvvfee4T7Onz8fCxYswG9/+1scPnwY1113HTIzMzFhwgSsXbsWM2bMwI4d\nO9C7d2+Eh4fjzjvvdLl+SyilYLFYmvSNIxy8IOpk+NluIqKO1dnvBXQxnyd4fw0iamtbtmxBSkoK\nhg8fDgCorKzE9u3bMXr0aHTr1g0AMHXqVOTk5Ohu55tvvsGMGTMQFBSE2tpa+Pn5obKyEikpKfjT\nn/6EkpISlJWVYdy4caisrITVakVNTQ0qKysBoP5xamoqevfujV69eqGyshLTpk3DX//6V8yaNQtK\nKdxwww2orKxEQkIC1qxZU59vqKamBhaLBZWVlfjmm2+QlpZW/1xJSQlOnjyJW2+9FS+88AKmTZuG\njz76CLfddpvu+s7bbA6TyQSz2ez2+hy8IGpD/Gw3EdHF4XwYUOA5iYjImFIK9957L/7v//6vftm6\ndevwz3/+0+X6Hh4esNlsAACbzYaamppznjeZTPD29q5/PGvWLKxbtw5JSUlYsWIFtm7dCl9fX5jN\nZnh5ecHX1xcA6h/7+PjAZDLVL/f29obZbIavry9EBF27doWvry/8/f1hs9nq12vIy8sLHh4e8PX1\nhc1mwy+//AIfH59z1hk9ejQeeOABlJWV4fPPP8fChQt113feZnM1ZeYF73lBRERERNQA78lBdHEa\nO3Ys1qxZgxMnTgAAzpw5g8suuwzbtm3D6dOnUVtbi88++6x+/aioKKSkpAAANmzYgNraWgDAtdde\ni+XLl6OioqJ+OwBw9uxZ9OjRA7W1tVi1alX9dgIDA3H27NlG/YmNjUVeXh727dsHAPjwww9x9dVX\nt2gfx48fjzfffLP+8e7duwHYBxJuu+02PProo4iLi0NoaKju+u2NMy+IiIiIiFpBc++vwftyEHUe\n8fHxeO655zB+/HjYbDZ4enri7bffxsKFC/Gb3/wGXbt2xeDBg+vXf+CBBzBhwgQkJSXh+uuvh7+/\nPwDg+uuvx+7duzFs2DB4eXnhxhtvxAsvvIA///nPGDlyJLp164aRI0fWD1hMmzYNDzzwABYvXnzO\nDUB9fHywfPlyTJkyBRaLBcOHD8fs2bNbtI+LFy/GQw89hEGDBsFiseCqq67C0qVLAdg/EjN8+HCs\nWLHCrfXbEwcviNxwPkwHJiIiam3NPf/xIyrtg/cAIWobU6dOxdSpU89ZNmrUKMyYMaPRuuHh4fj5\n55/rH7/00kv1Pz/55JP13zJSZ86cOZgzZ06j7VxxxRXIyMiof+w8eDB27Fjs2rWrUSYvL6/+52HD\nhmHr1q2a+zR9+nRMnz4dgP0mn6tXr3a53rBhwxp9C4jW+s7bbA8cvCAiIiKiToGDHm2PszyI6Hx1\n3g9eiMj1AN4AYAbwnlLqxQ7uErWT5l7g8MKIiIjowsHZIe2jObM8WvNjNO4MrnAmChGwfPlyvPHG\nG+csu+KKK/D22293UI9az3k9eCEiZgBvA7gWQD6AX0Vkg1IqQz9JnQk/kkFERETng/YeKOEACxE1\n1YwZM1x+vOVCcF4PXgAYAWCfUuoAAIjIJwAmAODgBRERERFddM6HmSidaVCmPWeHtPdMlPZ0PvSR\nOkbGkVMul8f3Cmvyts73wYsIAEecHucDGNlBfWmS5rxot+fJ6Hw48RERERFRx2nP2bPnw6yXznSt\nrjVQsjbwZd22XOVcZTpbH40GSrTeQPczH2+0zLtngm7OVaa5OaMMYPwm31WuORmgeX1sziAEAFQX\npAMALMWFOPzs7QCMa0oa3kn0fCIikwFcr5S63/H4dwBGKqXmNVjvQQAPOh7GAsh2sbkwAK5/i/ra\nM8e2Oi53obbV3Bzb6rjchdpWc3Nsq+NyF2pbzc2xrY7LXahtNTfHtjoux7Y6LndOZvPmzYmXXHKJ\nxShktVo9zGaz4XotzbR37nxqq7Cw0OPaa69tOGrRWynVrWHmfJ95cRRAL6fHkY5l51BKLQOwTG9D\nIpKslBrW1A60Z45tdVzuQm2ruTm21XG5C7Wt5ubYVsflLtS2mptjWx2Xu1Dbam6ObXVcjm11XK5h\nJjU1NW/gwIH1gxkn3/loqE7cq6l97Dbn7iZNL4qIiEj09fX19PDwsNpsNjz99NMFd999d7E72bS0\ntLiBAwdmAsCjjz7aMyAgwPrss8+6nv7hIhMREZGYnJyc2aNHD8MBBuecu5qTcc5ZrdYwd3/fpqY2\n0sn8CiBaRPqIiBeAaQA2dHCfiIiIiIiIiOp98MEHlVlZWRmfffbZ/scff7yXcaL9KaVgtVo7uhua\nzuvBC6WUBcA8AF8ByATwqVIqvWN7RURERERERNRYcXGxuUuXLvUjBOPGjeuXkJAQ179//4RFixaF\n1S1fs2ZNl/j4+LiJEyf6/OY3v4mpW56Zmek7YsSI2MjIyMTnnnuue93yJUuWhCQmJsYNGDAg/pln\nnvGyWBpPtFi4cGF4dHR0QnR0dMKzzz7bHQCys7O9oqKiBt52221Rt956q+/+/fu9Jk2aFBUdHZ0Q\nExMT/6c//al7ow11kPP9YyNQSm0EsLEVNqX7sZJOkmNbHZe7UNtqbo5tdVzuQm2ruTm21XG5C7Wt\n5ubYVsflLtS2mptjWx2XY1sdl2tuW+1m5syZngAS8vPzvT744IMDdctXrVqVFx4ebi0rK5PLLrss\n/u677y6y2Wwyb968qK1bt2Z17dq1i4gU1a2/b98+n+3bt2cXFxeb4+LiBv7hD384mZ6e7r1mzZqQ\n5OTkLG9vb3XHHXfELF26NHTevHmn63I//PCD38cffxyakpKSqZTC0KFD48aOHXs2LCzMevjwYe/3\n33//YEJCQllubq7HsWPHPHNzc9MB4NSpU2a9/QoLCzvZnOPRnNx5fcNOIiIiIiIiImepqal5SUlJ\n7t7zosm6zbk7pSnrO993Ij093Xv8+PExGRkZ6UFBQbZHH3205xdffNEVAAoKCrzWrVuXe/z4cY9P\nPvkkZMOGDQedt/Poo4/29PT0tL300kuFANC3b9+EzZs356xevbrr66+/3iMkJMQCAFVVVaaJEyee\nefXVVwvq2n7vvfdCTp8+7fH6668XAMD8+fN7duvWzTJlypTia665Jvbo0aN7AeDkyZPmIUOGxF1z\nzTUlN998c8ltt91Wajbrjl+0SGpqalhSUlKUO+ue9zMviIiIiIiIiM4HCQkJ1aGhobU7d+70KS8v\nN2/bti0wOTk5KzAw0DZixIjYyspK3Vs7eHt7188+MJvNsFgsopSSKVOmnH777bcbfXmFO/z8/Gx1\nP3fr1s2alpaWsXbt2i5Lly7ttnr16pDPPvssrznbbW3n9T0vmktEPhCREyKS5rRstYjsdvzLE5Hd\nbuYGi8jPjlyyiIxwI5MkIj+JyF4R+ZeIdHHRVi8R+U5EMkQkXUTmO5aHiMhmEcl1/DfYjcwUx2Ob\niDS6k6tO7mURyRKRPSKyVkS6upH5s2P93SLytYj0dKctp+cfExElImFutLVQRI46/d5udLctEXnY\nsW/pIvIXN4+HZo3oZIzqQyunWSMi4iMiv4hIqiPzJ8fyPiKyQ0T2Ofrq1aAtrdw8R+ac4+5GbpWI\nZItImtjr3NONzPuOZXtEZI2IBLjTltPzi0WkzM3+rRCRg06/s8Fu5kREnheRHBHJFJHfu5H5wamd\nAhFZ52ZbY0VkpyP3bxHp72buGkcuTUT+JiKNBqJFxCwiu0Tkc3fqQyOjWxs6Oc3aMMjp1oerjNPy\nRrVh0JZufWhkNGvDIKdbHzo53frQyLhTG3lif23ZLSLJjmWa5xaDnNH5xVVG89xikDM6vzTKOD3X\n6Nxi0Jbu+UWvPdE/v7hqy53rD1c5o/OLq4w71x9dxf7/X5ajzn9jVB8aGd3a0Mm5Ux+uckb10Sjj\n9Jxefbhqy+j6w2VberWh05Y79eEqZ1QfrjK69SEisU592S0ipSLyiF596GSMXju0cnrXploZo9pw\nmTOqD532NOtDry29+tBpS+/aVCtjVBtaOaP6WODoe5qI/F3s1zB9xPjaw1XO8PpDI1d//VFcXBxm\ns9nEVbY1HTx4sNfOnTsva7i8oKCg+969exP27t2bkJub20cphcOHD/dKTU1N3LZtW3x+fr5/RESE\nqbi42BwUFGQNDAy07dq1yyc1NTXg+PHjUREREZG//PJL1/T0dG+lFHbv3h25Z8+egRUVFd2qq6vP\nuT46ffp0aHx8fPd//etf4du3b+9rtVpl+/btsV999VVCWlpavFLKKy8vL2rMmDFlGzdu7Hr27FlT\naWmp6YsvvgiLjo7ufuDAgRillKfVapXi4uLA77//Pi4zM3PAiBEjwv/0pz+d3Lt3r5/evtXl0tLS\n4vbu3Zuwb9++KJvNpnk8CgoKugNAbW2tOTMzM/rEiRMRDV87NCmlLrp/AK4CMARAmsbzrwB42p0c\ngK8B3OD4+UYAW93I/ArgasfP9wH4s4u2egAY4vg5EEAOgHgAfwHwpGP5kwBeciMTByAWwFYAw5rQ\n1ngAHo7lL7nZVhendX4PYKk7bTke94L95quHAIS50dZCAP+t83vWyo0B8A0Ab8dz3d3to1aN6LRl\nVB9aOc0aASAAAhw/ewLYAWAUgE8BTHMsXwpgToO2tHKXAYgCkOd83N3I3eh4TgD83bk9nYxzfbwK\nRy0b5RyPhwH4EECZm/1bAWCyTn1o5WYAWAnA1LA+9PrntM4/ANzjZls5AOIcy+cCWOFG7nIARwDE\nOJY/C2Cmi/17FMDHAD53PNatD42Mbm3o5DRrwyCnWx+uMnq1YdCWbn1oZDRrw6iPevWh055ufTTM\nwP4HCXdqo9HvEzrnFoOc0UDY9ZAAACAASURBVPnFVUbz3GKQMzq/uKxTaJxbDNpaCJ3zi07O6Pzi\nso9Oz2tdf7hqy+j84irjzvXH3wDc7/jZC0BXo/rQyOjWhk7OnfpwlTOqj0YZN+vDVVu69aGR0a0N\nvT66UR+u2jOqD1cZw/pwypsBFALobVQfGhnD+tDIGdaHi4xubWjl3KkPjfZ060MjY1gfWn00qg8X\nbenWhk5O79o0AsBBAL6Ox58CmA7ja1OtnNG1qVau/vrju+++Ky8oKDiklEpWSiVXVVWl7t69u9pi\nsaQopZJzcnLOFBYWHqytrd1Zt87BgwcLjxw5kl/3WC+nlEouLS3NyM3NPZ2SkmI1yvTo0aO2X79+\nltjY2Op+/fpVvvbaaweVUskVFRUpV155ZUmfPn0qx44dWzJkyBDb+vXrs5VSyUuXLj0bGxtbHRMT\nUz1y5Mgam82WvGDBgoKnnnrqaF1b/fr1q/ziiy+qLRZLyrJly/bHxMRYoqOja+Lj48u/+eabTKVU\nco8ePaxpaWmHlFLJzzzzzJH+/ftX9uvXr/Kxxx6zWCyWlKysrD39+vWzFBYWHkxNTa367rvv9sXF\nxZXHxMTUxMTEWFavXp1jdDx27dpVU15evlcplXzo0KGCwsLCvLpMWVlZ2p49eyotFstOq9WanJGR\nUVpRUbE3Ly+v8MiRI/m7d+/O03vtcP53Uc68UEp9D+CMq+dERADcDvsFtzs5BaBu5DEIQIEbmRgA\n3zt+3gxgkou2jimldjp+Pgv7t6lEAJgA+wkHjv/eapRRSmUqpbJd7a9B7mtl/0YXAPgZQKQbmVKn\nTfs7jo87+wUArwF4vIkZTTq5OQBeVEpVO5470ZT2XNWITsaoPrRymjWi7Or+wuzp+KcAXANgjWP5\nObWhl1NK7VJK5bk8iPq5jY7nFIBfcG59aGVKnY6hLxr/rl3mRMQM4GXY68Ot/mntjxu5OQCeVUrZ\nHOudcCMDx351gf33cM5f1nVyRvXhKmcFUKOUynEsb/QaIiKRAP4LwHuOxwKD+miYcbSvWxs6Oc3a\nMMjp1oerjF5t6OWMaGQ0a8OdtrTqQyenWx8uMqEwqA0dmucWPUbnF42M5rnFIKd7ftHh8tzSRnTP\nL3r0rj806NaHBt3rDxEJgv2PLu8DgFKqRilVDJ360MoY1YZOTrc+dHKa9aGzX4BOfRjkmrRfMKgN\no7a06kMnp1kfOhnD61MnYwHsV0odgvuvH/WZJr52OOfcff1wzjTltcN5vwD3Xz8a5tzhnGnKa0ej\nttx4/XDONOW1wzlnVB8eAHzFPuPPD8AxGFx7aOQK3Ln+0MjVX394enpW19bWnjPTQyklNpvNZLPZ\nYLPZTF5eXrUeHh5153TYbDaX741d5ZRSyM/Pj+zVq1e+O5n09PSDmzZtKv73v/+dv2/fvvRHHnnk\nNAD4+vqq77//PvfAgQPpX3zxRd77779vueGGGypsNhtGjx5t/emnnw7985//tHz33XfZIoJXX321\n4LnnnjtW1056enpOz549xWazmWbOnFm0YcOGsh07duSlp6dnjh07ttxisZg+//xzFRsbexoAFi5c\neDw3Nzc9PT095+6777bZbDZTdHR0zRdffFHm5eVVCwBDhgypzcjIyNyyZcuJr7/++uTtt99eqrdv\nJpPJZjKZbH5+ftUAEBQUVFpUVFQ/K6qystLXz8+vzGw220wmEwICAs6eOXOma0lJSddu3brV3VDU\nrWuPi3LwwsCVAI4rpXLdXP8RAC+LyBEAiwD8jxuZdNhf6AFgCuyjuppEJAr2EcgdAMKVUnUFWwgg\n3I2M23Ry9wH40p2M2KdVHwFwF4Cn3WlLRCYAOKqUSm1i/+aJfSrgB3pTjRrkYgBc6ZjGtk1Ehjeh\nPcCgRhpk3K6PBjndGhH7VPHdAE7AfgLZD6DY6YSeDxcDPA1zSim36kMvJ/aPBPwOwCZ3MiKyHPba\nHQDgTTfbmgdgg1Ptu9u/5x318ZqIeLuZ6wdgqtinUn4pItHuHgvYX3S3NLhQ0svdD2CjiOQ7juGL\nRjnYBwM85D/TbCej8WvI67BfbNXN2QuFcX00zLhLM6dVG3o5g/pwldGtDYM+6tWHq4xubRi0BejU\nh0bOqD4aZk7BuDYA+4Xr1yKSIiIPOpa5c25xlTNilNE6t7jMGZxfGmXcPLdo9dHo/OIqZ3R+0Tse\neucWVzmj84urjNH1Rx8AJwEsF/vHkd4TEX/o14dWxog7OVf1oZnTqQ+XGTfqQ6+PWvWhlTGqDaPj\noVUfWjm9+tDKNOX6dBr+80bZrWvTBpmm0MppXps2zBi8drjMuXttqtFHd65PnTNuX5u6aAswfv/i\nnGnKexfnnGZ9KKWOOrZ1GPZBixIAKTC49nCVU0p9rdMft3Ii4llZWekfFBRUUrfM29u7tnv37oV7\n9+4dlJqammQ2m63BwcGlALB///6o3bt3J1VXV/v06NHjnIEjrdyxY8e6BwUFFXt7e9c27J9eWwUF\nBRF79+6Nz8vL69XwYy1auZqaGu/Tp08Hp6WlxWVlZUVXVFR4u9MWAJw5cyY4ICCgtG6QxijXu3fv\nvP3790fv3r17UFFRUWhERMQxo1xYWFiRUkrOnj3rV9em88CRr69vZXl5eWBtba3ZarWaSktLg2pq\narwsFouH0/HTe+2ox8GLxu5A015Y5wBYoJTqBWABHKPYBu4DMFdEUmD/qECN1opi/8z3PwA80vCC\n1/FXTVd/KdDM6NHKichTACwAVrmTUUo95Tgeq2B/Y6HblmPb/wv9k4mrtt6B/c3EYNhfuF5xM+cB\nIAT2aft/APCpiDT6TJzOcdSsERcZt+rDRU63RpRSVqXUYNj/4jAC9jd6hhrmRGRgK+SWAPheKfWD\nOxml1AwAPWGfZTLVjbaugv0k2Wigw6Ct/4H9uAyH/ff9hJs5bwBVSqlhAN4F8EETjoVmbWjkFgC4\nUSkVCWA57B+V0M0BSID9YuI1EfkFwFnYZ2MAAETkJgAnlFJu3wW7ORk3cy5rQy+nVR+uMmL/3LJu\nbei0pVkfOhnd2nDjeLisD52cZn24yjjOCZq14eS3SqkhAG4A8JDj/7F6WucWo5wGzYzeuUUrZ3B+\ncZUxPLdo5Nw5v7jKGZ1f9I6h3vWHq5zR+cVVxuj6wwP2j7q+o5S6DEA57FN567moD8OMBt2cTn1o\n5nTqw1VmIYzrQ6stvfrQyhjVhtFx1KoPrZxefWhl3Lo+Fft9C24B8FnD53SuTTUzerRyBtemjTJu\nXpvW50TED+69frhqz/D1w0XG3WtTreOod23aMOPutWnDnGZ9OAZoJsA+MNYT9hku17vaboM2GuVE\n5O5WyC3x8vKqDgoKqr8XVm1trbmkpKTrwIED9yYlJe2xWq2mEydOhABAv3798gYPHpzq7e1dderU\nqXMGmzRyocXFxcGXXHKJyxkyWm316tXraGJiYlpCQkKmxWIxHz169BJ3ckopERE1cODAzLCwsJN5\neXlR7uwXAJw5cyYkJCSk0ScOtHLHjx8P79evX+7gwYP3hISEnDp06FAvo9zJkydD+vTpc+DIkSO9\n0tPT48xms9W5fP39/avCw8MLs7OzY7Kzs6N9fX0rGpa3zrXHOTh44UTs044mAljdhNi9AP7p+Pkz\n2N9c6FJKZSmlxiulhsL+QrNfoz+esL+hXaWUqmvjuIj0cDzfA/a/xhplDGnlRGQ6gJsA3OUoqqa0\ntQouphy6yPWD/cUnVUTyYH+TtlNELtHJQCl13PHGzgb7G4lGx16jj/kA/qnsfoH9r5YNb8KkdTw0\na0QjY1gfGvvmVo0o+zTP7wD8BkBX+c/N+SIBaN5t2ClneGLRy4nIMwC6wf65e7fbUkpZAXwCnSmp\nTrkxAPoD2OeoDz8R2WfUlrJ/JEcp+xTM5dD5f7NBH/Pxn9/ZWgCD3Nkvsd9QagSAL7TaaZC7AUCS\n+s/MjdWw38/CsI9KqZ+UUlcqpUbAPoUzx2nVKwDc4jhWn8A+ZfMN6NdHo4yIfKS3H0Y5g9rQbU+j\nPlztVzqMa8NlWwb1odU/o9rQOx569eEq9wX060Nrv/RqA0D9X6zqpiWvdfRL99yik9OlldE7t7jZ\nVqPzi4vM1TA4t2i15c75RaOPuucXneOhe/2hkdM9v2jsl9G5JR9AvlPdrYH9Ta5efWhljGjmDOrD\nnfYa1odWxqg+XOYM6kOrLaNrD73joVcfWjm9+tDaL7euPWA/f+1USh13PDZ8/XCRcVejnNHrh0Fb\nLq9NXeQMr0212nPn9cNFHw2vTbX2zY33Lw0z7r53abhfevUxDsBBpdRJpVStY/tXwPja1FVO81rI\nnVzd9UdQUNA5b9hLSkq6eHl5VXt5eVlMJpMKDg4uLisrq7/xpYggNDT0THFxcbBR7tixYz1ramp8\n9u7dm5iamppos9lMe/bsGWjUlre3d62IwGQyqbCwsNMVFRX+7vTRw8OjJiQkpAgAQkNDi6uqqnzd\n2a/a2lqPyspK/+Dg4BI0oJWrqqry7dKlS7mjraKKiooAd3JdunQpj4+Pz05ISMgMDAws8/b2rnLO\nhYeHnxo4cGBmfHx8ttlstnp7e1d5eHhYqqurPR3HX+u14xwcvDjXOABZSimXn13SUAD7BRJgv5g2\n/LiJiHR3/NcE4I+w38Cm4ToC+0hoplLK+a+xG2B/0YHjv+vdyBj1x2VORK6HfUryLUqpCjczztOo\nJwDIMsoppfYqpborpaKUUlGwv4APUUoVGrTVw2nTtwFIc3qsdzzWwf6GGCISA/uNqk65kQM0akQn\no1sfOvumWSMi0k0cd9cWEV8A18L+V+rvYJ8mDjSoDZ3cOb8fV7RyInI/gOsA3OE4QRtlssXxbQmO\n/b6lYfsauRSl1CVO9VGhlOpvkMlyupAS2KfrN6wPreNRXx+w/+5y3MgA9mP/uVLqnBdrnVwmgCBH\nDcJpmTvHvq4+vGGfMVBfH0qp/1FKRTqO1TQA3yql7oJOfWhkDP/yoZXTqw2tHIDf6dWHRlvBerVh\n0EfN+tA5Hpq14cZx1KwPjeMxATr1obNfmrXhWO4vIoF1P8N+87s06JxbDHKatDJ65xaDnOb5RSPz\nq965xaAto/OL1vHQPL8YHEPN6w+dnOb5RWe/dK8/HMfmiIjEOhaNBZABnfrQyejSyhnVh05Osz40\nMjuN6kOnLc360DkeutceBsdRsz50cpr1obNfhtenDg3/yq/7+qGRcdc5OaP60MjoXpu6yhldmxq0\np/v64SoDg/rQyQHG718aZtx979Jwv/Tq4zCAUSLi5ziv1tWh7rWpRi4TxlzmnK8/Gga8vLxqKioq\nAqxWq0kphdLS0kBfX9+qyspKb8B+z4uioqKuDd90u8p17979+ODBg1OTkpL2JiUl7TWZTLZBgwal\nGbVV90ZdKYXi4uKuPj4+le70MSgoqLi0tDQQAEpKSgK9vb2rjTIAcPr06eDAwMBis9ncaJBPK2e1\nWs11H0spKSnp4s7x8PX1raqpqfEAAJvNJoWFhZd069btpHOu7vmqqiovx70uznTp0qX45MmToY5V\ntF47ztHoK9QuBiLydwCjAYSJ/bPEzyil3ofBZ/Fc5QA8AOANsY8qVgF40I1MgIg85Fjln7D/1a+h\nK2D/jPNe+c/XHv0v7J95/lREZsJ+5+Pb3ch4wz6tuhuAL0Rkt1LqOjdyix3ZzfbXBfyslJptkJnp\nOBnaHP2rW1+3LaXURhfHwKh/d4j96w0V7HcjnuVm7gMAH4j962trANyr1Dkj93p91KoRrbZ060Mn\nF61TIz0A/E3sNyo0AfhUKfW5iGQA+EREngOwC42nAWrlfg/7hcAlAPaIyEal1P1u5Cyw/45/ctTH\nP5VSz2plYP+L8w9iv2mhAEiFfeqiYR+hT6t/34pIN0dbu9G4FrVy/wawSkQWACiD/b4D7vRvGlzc\ns8KgrQcA/ENEbACKYJ+S6U7uZbF/bMAE+7Tfbw2OEWB/I6tXH424URtalkK7NjSbg31f9eqjNa0y\nqA9XXoR2bRjRq49GlFIWN+rDlT8Y1EY4gLWO34sHgI+VUptE5Fdon1v0crdB+/yildkH7XOLXu4f\nOucXlxk3jpdWWx8anF+0cl7QPr/o9VHv+kOrrTJon1+0MvPduP54GPY69wJwAPZv2TFBvz4aZQxq\nQ6+tX6FfH1q59wyuP1xl3OEqt9igPlxlyqF/7aHXR6N7RbjKrYf+9YerzD1G9SH2wbBrG+yz3rWp\ny4w79aHR1lvQqQ+t/hnUhlbOkEbuL3r1oZExujbV66NmfWhkjK5NtXJ3aNWHUmqHiKwBsBP2j/Ps\nArAM9ms/zWsPrZzR9YdOe+VwXH+cPHmy55EjRzx79ep1DAC6dOlSHhQUVJSenh4nIvD19a0IDw8/\nmZWVFWu1Wk0AxNfXtyIqKuqcm65q5Vwdb6NMdnZ2tMVi8WhqWzabzbR///4+J06cCDeZTLbevXvn\nudO/oqKikPDwcJf3BNPKeXp61uzfv7+fiMBsNlujoqIOupM7fPhwxNmzZ4OUUhIWFnaia9euZ51z\n+/bt62e1Wj1ERF166aWHPTw8rBEREcf27dvX78SJE76wD8I1PLc0Io1fN4mIiIiIiIjOT6mpqXlJ\nSUmuZq9QJ5OamhqWlJQU5c66F+XMCyIiIiIiIro4HFvyxNDW3F6PuS816SbnERERicnJyZk9evSw\nAMDnn38e+Morr4R/9913+44cOeJxzz33RBUUFHhZLBaJjIys3rZtm8v7u7WmxYsXhyYnJ/uvXLny\ncFu31Vo4eEFERERERETUAZ544omIa665pvT//b//dwIAduzY4WuU0VJbWwtPT8/W61wnwxt2EhER\nEREREXWAwsJCz169etV/9ezIkSMrXa2Xnp7unZSUNCAmJib+97//fU8/P7/LAPssjqFDh8Zec801\n/aOjowcCwLhx4/olJCTE9e/fP2HRokX131zzxhtvhEZFRQ1MTEyM2759e4CrdjozzrwgIiIiIiIi\nakNXX311jMlknztQUVFh6tevXxUAPPTQQyemT5/e95133qkYPXp06Zw5c05HRUXVNszPmzev19y5\nc0/MmjXrzF/+8pduzs9lZGT47dq1K33AgAE1ALBq1aq88PBwa1lZmVx22WXxd999d1F1dbXpxRdf\n7JmSkpIZEhJivfzyy2MHDhyo9a09nRJnXhARERERERG1oW3btuVkZWVlZGVlZSxZsqT+m0YmTZpU\num/fvr0zZsw4lZ2d7Tt06ND4goKCRpMMdu3aFXDfffedAYD777//tPNzgwYNKq8buACAl156KTw2\nNjZ+6NChcYWFhZ7p6ek+33//vf+oUaPO9uzZ0+Lj46MmTpx4pi33ty1w5gURERERERFRBwkPD7fO\nnj37zOzZs8+MGTOm/9dffx2QkpLiv3nz5iAAyMrKytDL+/n52ep+/vzzzwO3bdsWmJycnBUYGGgb\nMWJEbGVl5QUxaeGC2AkiIiIiIiKi882GDRsCz549awKAoqIi06FDh7z79OlT8+abbx6tm6kBAIMH\nDy5bsWJFMAB88MEHIVrbKy4uNgcFBVkDAwNtu3bt8klNTfUHgKuuuqp8x44dgYWFhebq6mpZu3Zt\ncHvsX2vizAsiIiLqtERkHYBeAHwAvKGUWiYiMwE8AaAYQCqAaqXUPBHpBmApgEsd8UeUUj92RL+J\niKjzaOpXm7anX3/91W/BggWXms1mpZSS3/3ud6euvvrqRveiePPNN4/cddddfV5++eUe11xzTWlA\nQIDV1fYmTZpUsmzZsm59+/ZN6Nu3b1VSUlI5APTu3bv2iSeeKBg1alRcYGCg9Xy73wUAiFKqo/tA\nRERE5JKIhCilzoiIL4BfAVwH4EcAQwCcBfAtgFTH4MXHAJYopf4tIpcC+EopFddhnSciog6Rmpqa\nl5SUdKqj+9Gazp49a/L397eZTCYsW7YsePXq1SFbtmzZ39H9aqnU1NSwpKSkKHfW5cwLIiIi6sx+\nLyK3OX7uBeB3ALYppc4AgIh8BiDG8fw4APEiUpftIiIBSqmy9uwwERFRa/vxxx/95s+ff6lSCl26\ndLGuWLEir6P71N44eEFERESdkoiMhn1A4jdKqQoR2QogC4DWbAoTgFFKqar26SEREVH7uP7668uy\ns7N1b9x5oeMNO4mIiKizCgJQ5Bi4GABgFAB/AFeLSLCIeACY5LT+1wAernsgIoPbtbdERETUZjh4\nQURERJ3VJgAeIpIJ4EUAPwM4CuAFAL/Afu+LPAAljvV/D2CYiOwRkQwAs9u9x0RERNQm+LERIiIi\n6pSUUtUAbmi4XESSHd864gFgLYB1jvVPAZjavr0kIiKi9sCZF0RERHS+WSgiuwGkATgIx+AFERER\nXbg484KIiIjOK0qp/+7oPhAR0fnj17/ePLQ1tzd81r9SmrL+ww8/HPHZZ5+FlpaWmisqKnbVLf/y\nyy8DHnvssV45OTl+77777oEZM2YUAUB2drbXd999FzB79uwzALB48eLQ5ORk/5UrVx5uzf0433Dm\nBREREREREVEbufXWW4t37NiR2XB53759a5YvX5538803n3Zenpub67169eqQ9uvh+YEzL4iIiIiI\niIjayNixY8tdLY+Nja0BAJPp3DkFTz31VMSBAwd8BgwYEH/HHXecCg4OthYWFnpeeeWV0YcPH/a+\n4YYbipcuXZrfDl3vVDjzgoiIiIiIiKiTeP75548OGzasLCsrK+OZZ545AQAZGRl+69atO5CZmZm+\nYcOG4H379nl2dD/bGwcviIiIiIiIiDqx3/72t6WhoaFWPz8/1b9//6r9+/d7d3Sf2hsHL4iIiIiI\niIg6MS8vL1X3s9lsVrW1tdKR/ekIHLwgIiIiIiIi6iSCgoKsZWVl5o7uR2fDG3YSERERERHRBaup\nX23a2mbPnh25du3akKqqKlN4ePigu+6669Srr75asG3bNr/bb7+9f2lpqXnLli1dn3/++Z779u1L\nHzFiRKXZbFaxsbHxd95556ng4GBrR/a/sxCllPFaREREREREROeB1NTUvKSkpFMd3Q8ylpqaGpaU\nlBTlzrr82AgRERERERERdWocvCAiIiIiIiKiTo2DF0RERERERETUqXHwgoiIiIiIiIg6NQ5eEBER\nEREREVGnxsELIiIiIiIiIurUPDq6A0RERERERERtZf0HNwxtze1NuO/LlKasHxERkXjJJZfUpKSk\nZNctGzBgQLzVapXc3Nz0prb/5JNPXvLiiy8WNjV3vuPMCyIiIiIiIqI2VF5ebt63b58nAOzcudOn\nJdtavHhxj6ZmLBZLS5rsFDh4QURERERERNSGbr311jMrV64MAYCVK1eGTJo06Uzdc9nZ2V5Dhw6N\njY+Pj4uPj4/bvHmzPwAcOnTIc9iwYbEDBgyIj46OTti0aVPA3LlzI6qrq00DBgyIv+WWW/oAwJIl\nS0ISExPjBgwYEH/nnXf2rhuo8PPzu+yBBx6IjI2Njd+yZUvA3LlzI/r165cQExMT/+CDD0Z2wGFo\nEQ5eEBEREREREbWhO+64o+hf//pXMAB89dVXXSdOnFhc91zPnj0tP/zwQ05GRkbm6tWrDyxYsOBS\nAPjggw9Cxo4dW5KVlZWRmZmZPnLkyIolS5Yc9fb2tmVlZWVs2LDh4M6dO33WrFkTkpycnJWVlZVh\nMpnU0qVLQwGgsrLSNHLkyPLs7OyMpKSkyo0bNwbn5uam5+TkZLzwwgvHOuZINB/veUFERERERETU\nhrp3724NCgqyLFu2LLh///6VAQEBtrrnampqZObMmb0zMjJ8TSYTDh065A0Ao0aNKp81a1ZUbW2t\nafLkyUWXX355ZcPtbtq0KTAtLc0vKSkpDgCqqqpM3bt3twCA2WzG9OnTiwAgNDTU6u3tbZs6dWrU\nTTfdVDx16tSS9tnz1sOZF0RERERERERtbPLkyUWPP/547zvuuOOM8/Lnn38+vHv37rWZmZkZe/fu\nzaitrTUBwA033FD2/fffZ0dERNTcd999fd56663QhttUSsmUKVNOZ2VlZWRlZWXk5eWlvfrqqwUA\n4OXlZfPwsM9X8PT0xO7duzMnT55c9Pnnn3cdPXp0dDvscqvizAsiIiIiIiKiNnbXXXcVHTt2zHPi\nxImlhw4d8qxbXlJSYo6MjKwxm8146623Qq1WKwAgJyfHq2/fvjWPPfbYqerqatm5c6cfgNMeHh6q\nurpavL291fXXX186ceLE/v/7v/97PCIiwnL8+HFzSUmJOSYmpsa57ZKSElNZWZlp6tSpJePGjSvr\n169fYvvufctx8IKIiIiIiIguWE39atO2EhwcbHv++ecbfcXpI488cmLSpEn9Pvnkk9BrrrmmxNfX\n1wYAX331VeDixYsv8fDwUH5+ftZVq1YdBIC77rrrZFxcXPzAgQMrNmzYcPCPf/zj0bFjx8bYbDZ4\nenqqxYsXH244eFFcXGy+6aab+ldXVwsA/PnPfz7SHvvcmkQp1dF9ICIiIiIiImoVqampeUlJSac6\nuh9kLDU1NSwpKSnKnXV5zwsiIiIiIiIi6tQ4eEFEREREREREnRoHL4iIiIiIiIioU+PgBRERERER\nERF1ahy8ICIiIiIiIqJOjYMXRERERERERNSpeXR0B4iIiIiIiIjayl8/vG5oa25v1u++SmnK+u++\n+27wyy+/3MNms8m1115b/M477xwFgA8//LBrfHx81dChQ6sAYMSIEbGLFi06ctVVV1W0Zn8vFJx5\nQURERERERNQGCgsLzU8//XTk1q1bc/bt25d+/Phxz/Xr1wcCwLp167ru2bPHt6P7eL7g4AURERER\nERFRG8jOzvaOioqq7tmzpwUAxo4dW/rZZ58Fb9682f+bb77p+sc//jFywIAB8enp6d4A8Pe//z04\nMTExLioqauCmTZsCOrb3nQsHL4iIiIiIiIjaQHx8fPWBAwd8srOzvWpra7Fhw4bggoICr2uvvbZ8\n3Lhxxc8991x+VlZWA1+u/gAAIABJREFURkJCQjUAWCwW2bt3b+ZLL7105Nlnn+3Z0f3vTDh4QURE\nRERERNQGunXrZn3ttdcOTZkype/w4cMHXHrppdUmk0lprT9lypQiALj88svL8/Pzvdqvp50fBy+I\niIiIiIiI2sidd95ZsmfPnqzdu3dnxcbGVvXv379aa10fHx8FAB4eHrBardJ+vez8OHhBRERERERE\n1EaOHj3qAQAnT540v/fee93nzp17EgACAgKspaWlfE/uJn5VKhEREREREV2wmvrVpq1t9uzZvTIy\nMvwA4IknnigYNGhQNQDcddddZ+bMmRO1dOnS8DVr1uzvyD6eD0QpzY/bEBEREREREZ1XUlNT85KS\nkk51dD/IWGpqalhSUlKUO+tyigoRERERERERdWocvCAiIiIiIiKiTo2DF0RERERERETUqXHwgoiI\niIiIiIg6NQ5eEBEREREREVGnxsELIiIiIiIiIurUPDq6A0RERERERERt5Yk11w9tze29NHlTSlPW\nf/3110OXLFkSDgBKKXnmmWeO3n333cWt2afWMmLEiNhFixYdueqqqyoiIiISk5OTM3v06GHp6H4B\nHLwgIiIiIiIiahP79+/3fOWVV3rs3r07MzQ01FpSUmI6duwY34c3Az82QkRERERERNQGjh075unv\n728LCgqyAkBQUJBtwIABNQCwfft236SkpAExMTHx1157bb+TJ0+aAfvsh5kzZ/YaOHBgXN++fRO2\nbdvmN378+H69e/ce+Pvf/75n3baXLFkSkpiYGDdgwID4O++8s7fF0niChMViwYMPPhgZHR2dEBMT\nE//88893B4D169cHxsXFxcfExMRPmTIlqrKyUvT2Q6ut1157LSwqKmpgYmJi3LRp03rfc889lwJA\nQUGBx3XXXddv4MCBcQMHDoz7+uuv/Vt6LDl4QURERERERNQGRo0aVREWFlbbq1evxMmTJ0d9/PHH\nQXXPTZ8+vc8LL7yQn5OTk5GQkFD5xBNP1A9MeHl52dLS0jJnzJhxcsqUKf3ffffdw1lZWemrV68O\n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\nTz31VLYkJSQk7Bs3blzoCy+80CooKMiRmJiYJUmvvPLKvgkTJrQPCwtr7uHhoZdeemnv0KFDT5yd\nx9ixY3MHDBjQeeHChVmVsZ/aZ10z1tr6zgEAAAAAgFqRmpqaFRUVdbS+88DFpaamNo+KigqtTluW\njQAAAAAAALdG8QIAAAAAALg1ihcAAAAAAMCtUbwAAAAAAABujeIFAAAAAABwaxQvAAAAAACAW/Oq\n7wQAAAAAAHCV2Pe+ia7N/pJu77m5Ju2Dg4O7Nm7cuEySWrRoUfrOO+98165dO0d171+zZo3f/fff\n397Ly8umpKTs9PPzszXNuTKPlJSUna1bt6722OeycOHCoJSUlMaJiYn7fko/NcXMCwAAAAAAXGj9\n+vWZmZmZ6T169Ch+4oknWp993eE4fz0hMTExcPr06YcyMjLSL7VwcSWgeAEAAAAAQB0YOHBg4Xff\nfecjSY0aNepxzz33hISHh0d+9tlnfh9++KF/586dI8PCwiLHjBkTevLkSfOnP/2p+UcffRT49NNP\nB48aNarD2f0tWbIkoFOnTl3Cw8MjY2JiwqWKQsjkyZNDOnXq1CUsLCzy6aefvqqy/fz586+KjIzs\nHBYWFrllyxZfScrJyfEcOnTo1WFhYZFRUVERX3/9dcMLxesLy0YAAAAAAKgDK1asaBYZGXlSkk6e\nPOnRu3fvE4sXL95fXFxs/ud//qfrp59+uqtbt24lo0ePDn3uuedaPPHEE9//7//+r9/IkSPzJ06c\nmHd2f3Pnzm396aefZnbo0KH06NGjnpK0YMGCFvv27WuQnp6e5u3trZycHM/K9s2bN3ekp6fvnDt3\nbou5c+e2XLZs2d6ZM2e2iYqKKl63bt1/V6xY4T9+/PgOGRkZ6eeL19239UPMvAAAAAAAwIUGDBgQ\nFhEREVlYWOjx1FNPHZYkT09PTZgwIU+SUlNTfUNCQkq6detWIkkTJkw49uWXX/pfrN+YmJiisWPH\nhi5YsKB55dKTzz//vMm999571NvbW5LUsmXLssr2d955Z54k9erVqzg7O9tHkjZu3Oj/m9/85pgk\njRo1qvD48eNeubm5HueL1963UjPMvAAAAAAAwIXWr1+fefZGmQ0aNCj38qrZ/yWfOnVq8Nq1a5tK\nUkZGRvrSpUv3ff75541XrFjRNDo6OnLz5s0XnBnh6+trJcnLy8s6HA5Tw8eoV8y8AAAAAACgHkVF\n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\nbeUmoFNUcaJJQ0kfO18AAAAAALiVQYMGydPTU926ddMf//hHSZKnp6duv/12SdKuXbu0Y8cODRs2\nTFLFMpLWrVtLkrp166axY8fql7/8pX75y4pzKtatW6d33333TP8BARWHcjZo0EAjR46UJEVHR2vt\n2rWSpK+++krvv/++JOnuu+/WzJkzLxh3Ry4rXlhr/7/zXBpyjrZW0m/P088SSUvOEU+RdM1PyREA\nAAAAAFf74osv1Lx58x/EfH195enpKUmy1qpLly766quvfnTvRx99pH//+99auXKlnn76aW3fvv28\n43h7e6ticUJFccThcNTiU9Svai0bMcZ8Vp0YAAAAAAComfDwcB05cuRM8aK0tFRpaWkqLy9Xdna2\nBg0apHnz5ik/P19FRUUaNmyY/vrXv565Py8v74L9X3vttWdmarz99tvq16/fBePu6IIzL4wxvpIa\nqWLpR4Ak47zURBc4mhQAAAAAAHdQ06NN60ODBg2UlJSkadOmKT8/Xw6HQw888IDCwsJ01113KT8/\nX9ZaTZs2Tc2aNdNjjz2m3/72t7rmmmvk6emp3//+97rtttvO2/+LL76oiRMn6rnnnlOLFi30+uuv\nXzDujkzFio3zXDTm/0l6QFIbVZzmUVm8KJC02Fr7ksszrGUxMTE2JSWlvtO4LBx6+RGXj9F6yjyX\njwEAAADg52Pnzp3q3LlzfaeBajjX/1bGmM3W2piz215w5oW19gVJLxhjplprX6zdNAEAAAAAAC6u\nWht2WmtfNMZcKym06j3W2kQX5QXgLI8kjaiTcebFrqmTcQAAAACguqpVvDDGvCnpaklbJZU5w1YS\nxQsAAAAAAOBS1T0qNUZSpL3QBhkAAAAAAAAuUK2jUiXtkNTKlYkAAAAAAACcS3VnXjSXlG6M2Sip\npDJorR3lkqwAAAAAAACcqlu8eNKVSQAAAAAA4AqHF2TUan+tHoqoUfvZs2crMTFReXl5KioqOhP/\n05/+pNdee01eXl5q0aKFlixZovbt2ysrK0vJycm68847JUl///vflZKSopdeeqlWn+NyU61lI9ba\n9ed6uTo5AAAAAAAuZ7fccos2btz4o3iPHj2UkpKibdu2KTY2VjNnzpQkZWVlaenSpXWdpturVvHC\nGFNojClwvk4ZY8qMMQWuTg4AAAAAgMtZnz591Lp16x/FBw0apEaNGp1ps3//fknSo48+qg0bNqh7\n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\n","text/plain":["<Figure size 1080x360 with 2 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\noIMO4vLLL6enp4epU6fy8Y9/nPPOO4/zzz+fd7/73Zx11ln88Ic/5MYbb+xw9pIkrdtmz57NBRdc\nwF577cWjjz7KlltuybJly3jrW9/KrFmzeP3rX8973/tepk6dyu67784TTzzBJptswrnnnsvmm2/O\n9OnTWbJkCfvssw8HHHBAx5YoH+ksYEiSNAz+8A//kBNPPJGTTz6ZQw45hFGjRnH77bez//77A7Bs\n2TJGjx4NwI477sj73vc+DjnkEH7+85+z0UYbdTJ1SZLWea997WvZa6+9ALjkkks455xzWLp0KQsW\nLODOO+8kCaNHj2b33XcH4JWvfCUAV111FbNmzeLSSy8FWg8wZs+ebQGjn4asgJFkDHAhsA1QwDlV\n9eUkWwJTgXHAXOCwqnosrfVVvgwcDDwNHF1VNzfXOgr4++bSn6mqC5r4bsD5wCbAlcAJVVVDdU+S\nJPXX9ttvz80338yVV17J3//937Pffvux44478vOf/7zP9rfddhtbbLEFDz/88DBnKkmSlrfpppsC\ncN999/GFL3yB6dOnM2rUKI4++mieffbZFZ5XVZx11lkceOCBw5XqWm0o58BYCpxYVTsAewHHJtkB\nOAW4pqomANc0+wAHAROazxTgbICm4HEasCewB3BaklHNOWcDH2w7b/IQ3o8kSf3261//mpe//OX8\n5V/+JSeddBI33ngjCxcufKGA8dxzz3HHHXcAcNlll/Hoo49y/fXX8+EPf5jHH3+8k6lLkqTGE088\nwaabbsrmm2/OQw89xA9+8AMAXve617FgwQKmT58OwOLFi1m6dCkHHnggZ599Ns899xwA99xzD089\n9VTH8h/phmwERlUtABY024uT3AVsCxwKvKVpdgFwHXByE7+wGUExLckWSUY3ba+uqkcBklwNTE5y\nHfDKqprWxC8E3gH8YKjuSZKk/rrttts46aSTWG+99dhwww05++yz2WCDDTj++ONZtGgRS5cu5SMf\n+QjbbLMNp5xyCtdccw1jxozhuOOO44QTTuCCCy7o9C1IkrTO23nnndlll114/etfz5gxY9hnn30A\n2GijjZg6dSof/vCHeeaZZ9hkk0348Y9/zAc+8AHmzp3LrrvuSlXR09PDd7/73Q7fxcg1LHNgJBkH\n7ALcCGzTFDcAHqT1igm0ihsPtJ02r4mtLD6vj3hf3z+F1qgOxo4d2/8bkSSpnw488MA+h49ef/31\n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\nVTp0WHODytdff50hQ4bQr18/evbsucrfvYkTJ9KrVy969+7Nl770pTXqfu9732PkyJGsXLmyWfuu\n9Wu2JzAiYhKlRTY7RsQi4MLMvJrS1mWTVit+CDA6It4F3gO+lpkvF+e+QWlHk60oLd55ZxG/BLgx\nIk4BnqO0KKgkSa3OoYceSps2bWjXrh1/+ctfuPvuu5k/fz4zZswgMxk2bBgPPPAAnTt3ZsGCBUye\nPJnx48ez3377cd111/HQQw8xZcoUfvjDH3Lrrbey11578eCDD7Lllltyzz33cN5553HzzTevcs0x\nY8YwePBgxo8fzyuvvMLAgQM57LDD2GabbSr0U5AkaeMdeuihZCbPPPMMN9544xrn27dvzy233ML2\n22/PSy+9xAEHHMCwYcOYN28eF198MdOnT6djx468/PLLq9QbNWoUr732Gr/+9a8pfaeuSmrOXUhO\nXEt8ZAOxmyltq9pQ+Rpg3wbiy4Ah76+XkiRV3upTSO6++27uvvtu+vbtC5S+NZo/fz6dO3ema9eu\n9OxZmmu8zz77MGTIECKCnj17snDhQgCWL1/OiBEjmD9/PhHBu+++u8Y17777bqZMmcLYsWMBePvt\nt/nrX//K3nvv3cx3K0lS06v7W/r0008zZMgQBg0axLbbblt/PjM577zzeOCBB9hiiy1YvHgxS5Ys\n4Q9/+AMnnHBC/d/hHXfcsb7OD37wA/bff3+uvPLKFr8fNaxSi3hKkqS1yEzOPfdcTj/99FXiCxcu\npF27dvWft9hii/rPW2yxBStWrABKj7oeeuih3HLLLSxcuJBBgwY1eI2bb76ZPffcs/luRJKkFrbH\nHnuwyy67MG/ePAYO/Ncu2ddeey1Lly5l1qxZtG3bli5duvD222+vs6399tuPWbNm8fLLL6+S2FDl\nVGobVUmStBZHHHEE48ePr181ffHixbz44lrXql7D8uXL2W230q7jEyZMWOs1LrvsMjJLa1s/8sgj\n76/TkiRVgRdffJFnn32Wj370o6vEly9fzoc+9CHatm3Lfffdx3PPPQfA4MGDmTx5MsuWLQNYZQrJ\n0KFDOeecczjqqKN47bXXWu4mtFY+gSFJ2qxt6FZtLeHwww/niSee4MADDwRKW8D95je/qd9qdX2+\n+93vMmLECC6++GKOOuqoBst873vf41vf+ha9evXivffeo2vXrm6vKknaKNXwt7RuPal3332XSy65\nhF122WWV8yeddBL/9m//Rs+ePRkwYAB77bUXUJqOef755/OpT32KNm3a0Ldv31WS/yeccAKvvfYa\nw4YNY+rUqWy11VYteVtaTdR987K5GDBgQNbU1DRL2/1HTWyWdrVus35ycqW7IKkVeeKJJ1znYQM0\n9POKiFmZOaBCXaqo5hxHQHWOJfw7K2l1/i3VhmjKsYRTSCRJkiRJUtUzgSFJkiRJkqqeCQxJ0mZn\nc5s+ubH8OUmSpGpiAkOStFlp3749y5Yt83/O1yMzWbZsGe3bt690VyRJkgB3IZEkbWY6derEokWL\nWLp0aaW7UvXat29Pp06dKt0NSZIkwASGJGkz07ZtW7p27VrpbkiSJGkDmcCQJEmSJG20gy47qEnb\n+9NZf9rgOrW1tfTt25c777yToUOHrrPsV7/6Vf7jP/6DHj16bGwX6w0aNIgXXniB9u3bs+222zJ+\n/Hj23HPP99XmRRddxLbbbst3vvOdBs9PmDCBmpoaLr/88vd1ncZcq9q4BoYkSZIkqVWbNGkSBx98\nMJMmTVpv2V/96ldNkryoc+211/Loo48yYsQIRo0a1WTtVqMVK1ZU9PomMCRJkiRJrVZmMnnyZCZM\nmMC0adN4++23AXjjjTc46qij6N27N/vuuy833HADUHpqoqamBoCvf/3rDBgwgH322YcLL7ywvs0u\nXbpw4YUX0q9fP3r27MmTTz653n4ccsghLFiwAIDRo0ez3377se+++3LaaafVLx6+YMECDjvsMHr3\n7k2/fv14+umn19nmuHHj6NGjB7169WL48OFrnL/99tvZf//96du3L4cddhhLliwBSk9WfOUrX2HQ\noEF87GMfY9y4cfV1xowZQ/fu3Tn44IN56qmn6uNPP/00Q4cOpX///nzyk5+sv+eRI0fyta99jf33\n35/vfve76/05NKdmS2BExPiIeDEiHiuLXRQRiyOitngdWXbu3IhYEBFPRcQRZfGhRWxBRJxTFu8a\nEX8p4jdExAea614kSZIkSdVp+vTpdO3alT322INBgwbxu9/9DoDf//73fOQjH+HRRx/lsccea3Bq\nyZgxY6ipqWHOnDn88Y9/ZM6cOfXnOnbsyOzZs/n617/O2LFj19uP22+/nZ49ewJw5plnMnPmTB57\n7DHeeust7rjjDgBOOukkzjjjDB599FGmT5/Orrvuus42L7nkEh555BHmzJnDL37xizXOH3zwwTz8\n8MM88sgjDB8+nB//+Mf155588knuuusuZsyYwfe//33effddZs2axfXXX09tbS1Tp05l5syZ9eVP\nO+00LrvsMmbNmsXYsWP5xje+UX9u0aJFTJ8+nZ/97Gfr/Tk0p+Z8AmMC0NDko0szs0/xmgoQET2A\n4cA+RZ2fR0SbiGgD0Bar1QAAIABJREFU/A/wGaAHcGJRFuBHRVsfB/4BnNKM9yJJkiRJqkKTJk2q\nfzph+PDh9dNIevbsybRp0zj77LN58MEH+eAHP7hG3RtvvJF+/frRt29fHn/8cebNm1d/7rOf/SwA\n/fv3Z+HChWu9/kknnUSfPn3405/+VJ/ouO+++9h///3p2bMnf/jDH3j88cd57bXXWLx4MccddxxQ\n2u1r6623Xue99erVi5NOOonf/OY3bLnlmktYLlq0iCOOOIKePXvyk5/8hMcff7z+3FFHHUW7du3o\n2LEjH/rQh1iyZAkPPvggxx13HFtvvTXbb789w4YNA+D1119n+vTpnHDCCfTp04fTTz+dF154ob6t\nE044gTZt2qyzry2h2RIYmfkA8HIjix8DXJ+Z72Tms8ACYGDxWpCZz2TmP4HrgWMiIoDBwE1F/WuA\nY5v0BiRJkiRJVW3lypXcfPPNjB49mi5dunDWWWfx+9//ntdee43u3bsze/ZsevbsyX/+538yevTo\nVeo+++yzjB07lnvvvZc5c+Zw1FFH1U8/AWjXrh0Abdq0qV/74YgjjqBPnz589atfrS937bXXUltb\ny6233sruu+/O22+/zTe+8Q1uuukm5s6dy6mnnrpKu6s7//zz6dOnD3369Fnj3O9+9zvOOOMMZs+e\nzX777bfGGhRnnXUWZ555JnPnzuWXv/xlg/1f/R4a8t5777HDDjtQW1tb/3riiSfqz2+zzTZrrduS\nKrEGxpkRMaeYYtKhiO0GPF9WZlERW1t8J+CVzFyxWrxBEXFaRNRERM3SpUub6j4kSVIziojdI+K+\niJgXEY9HxP8p4jtGxLSImF+8dyjiERHjiumlcyKiX1lbI4ry8yNiRFm8f0TMLeqMK74kkSS1Evfe\ney+9evXi+eefZ+HChTz33HMcf/zx3HLLLfztb39j66235otf/CKjRo1i9uzZq9R99dVX2Wabbfjg\nBz/IkiVLuPPOO9d7vbvuuova2lp+9atfrbVMXRKhY8eOvP7669x0U+l79+22245OnTpx6623AvDO\nO+/w5ptvMmbMmPqkQbn33nuP559/nkMPPZQf/ehHLF++nNdff32VMsuXL2e33Ur/K3zNNdest/+H\nHHIIt956K2+99RavvfYat99+OwDbb789Xbt2ZfLkyUBpXZFHH310ve21tJbeRvUK4AdAFu8/Bb7S\n3BfNzCuBKwEGDBiQzX09SZLUJFYA387M2RGxHTArIqYBI4F7M/OSYn2sc4CzKU057Va89qc07tg/\nInYELgQGUBqDzIqIKZn5j6LMqcBfgKmUprKufwQrSaq3MdueNpVJkybVT8moc/zxx3PFFVewyy67\nMGrUKLbYYgvatm3LFVdcsUq53r1707dvX/baay923313DjqoabaD3WGHHTj11FPZd999+fCHP8x+\n++1Xf+5///d/Of3007ngggto27YtkydP5mMf+1iD7axcuZIvfvGLLF++nMzkm9/8JjvssMMqZS66\n6CJOOOEEOnTowODBg3n22WfX2bd+/frxhS98gd69e/OhD31olb5de+21fP3rX+fiiy/m3XffZfjw\n4fTu3ft9/CSaXtSthtosjUd0Ae7IzH3XdS4izgXIzP9XnLsLuKgoelFmHlHEzy1ilwBLgQ9n5oqI\nOLC83LoMGDAg61acbWr9R01slna1brN+cnKluyBJm5WImJWZAypw3duAy4vXoMx8ISJ2Be7PzD0j\n4pfF8aSi/FPAoLpXZp5exH8J3F+87svMvYr4ieXlGtKc4wiozrGEf2clre6JJ55g7733rnQ31Eo0\n9N/Lxo4lWnQKSTHIqHMcULdDyRRgeES0i4iulL45mQHMBLoVO458gNJCn1OylHW5D/hcUX8EcFtL\n3IMkSWp5xRcffSk9KbFLZtatLPZ3YJfieEOnpO5WHK8elyRJVajZppBExCRK33h0jIhFlB7dHBQR\nfSg9vrkQOB0gMx+PiBuBeZQeFz0jM1cW7ZwJ3AW0AcZnZt2yqmcD10fExcAjwNXNdS+SJKlyImJb\n4GbgW5n5avkyFZmZEdGs00Mj4jTgNIDOnTs356UkSdI6NFsCIzNPbCC81iRDZo4BxjQQn0ppTurq\n8Wco7VIiSZI2URHRllLy4trM/G0RXhIRu5ZNIXmxiC8Gdi+r3qmILab0pUp5/P4i3qmB8qtwLS1J\nkqpDJXYhkSRJWq9iR5CrgScy82dlp6ZQmj4Kq04jnQKcXOxGcgCwvJhqchdweER0KHYsORy4qzj3\nakQcUFzrZJySKklS1WrpXUgkSZIa6yDgS8DciKjbW+48Sot53xgRpwDPAZ8vzk0FjgQWAG8CXwbI\nzJcj4geU1tYCGJ2ZLxfH3wAmAFtR2n3EHUgkSapSJjAkSVJVysyHgFjL6SENlE/gjLW0NR4Y30C8\nBlhjtzRJklR9TGBIkiRJkjbaHw/5VJO296kH/rjBdWpra+nbty933nknQ4cObdL+rM1FF13Etttu\ny3e+851G1xk0aBBjx45lwIABHHnkkVx33XXssMMO77svXbp0YbvttqNNmzYAHHLIIYwbN26D+n3B\nBRdwyCGHcNhhh73v/jQXExiSJEmSpFZt0qRJHHzwwUyaNKlZEhgrVqxgyy2b9n+fp05dY6+K9+W+\n++6jY8eOG11/9OjRTdib5uEinpIkSZKkViszmTx5MhMmTGDatGm8/fbbACxcuJC99tqLkSNH0r17\nd0466STuueceDjroILp168aMGTMAeOONN/jKV77CwIED6du3L7fdVlrPecKECQwbNozBgwczZMga\nMxdXMWjQIM4++2wGDhxI9+7defDBBwF46623GD58OHvvvTfHHXccb731Vn2dLl268NJLLwFw7LHH\n0r9/f/bZZx+uvPLK+jLbbrst559/Pr179+aAAw5gyZIlG/SzGTduHD169KBXr14MHz58jfNXXXUV\nn/nMZ3jrrbcYOXIkN910U33fzj33XPr06cOAAQOYPXs2RxxxBHvssQe/+MUv6n/uo0aNYt9996Vn\nz57ccMMNG9S3jWECQ5IkSZLUak2fPp2uXbuyxx57MGjQIH73u9/Vn1uwYAHf/va3efLJJ3nyySe5\n7rrreOihhxg7diw//OEPARgzZgyDBw9mxowZ3HfffYwaNYo33ngDgNmzZ3PTTTfxxz+uf1rLihUr\nmDFjBv/1X//F97//fQCuuOIKtt56a5544gm+//3vM2vWrAbrjh8/nlmzZlFTU8O4ceNYtmwZUEqu\nHHDAATz66KMccsghXHXVVWu9/qGHHkqfPn3o06cPl156KQCXXHIJjzzyCHPmzKlPPNS5/PLLueOO\nO7j11lvZaqut1mivc+fO1NbW8slPfrI+ufHwww9z4YUXAvDb3/6W2tpaHn30Ue655x5GjRrFCy+8\nsN6f0/vhFBJJkiRJUqs1adKk+qcLhg8fzsSJEzn++OMB6Nq1Kz179gRgn332YciQIUQEPXv2ZOHC\nhQDcfffdTJkyhbFjxwLw9ttv89e//hWAT3/60+y4446N6sdnP/tZAPr371/f9gMPPMA3v/lNAHr1\n6kWvXr0arDtu3DhuueUWAJ5//nnmz5/PTjvtxAc+8AGOPvro+nanTZu21us3NIWkV69enHTSSRx7\n7LEce+yx9fGJEyey++67c+utt9K2bdsG2xs2bBgAPXv25PXXX2e77bZju+22o127drzyyis89NBD\nnHjiibRp04ZddtmFT33qU8ycObO+XnMwgSFJkiRJapVWrlzJzTffzG233caYMWPITJYtW8Zrr70G\nQLt27erLbrHFFvWft9hiC1asWAGUpkLcfPPN7Lnnnqu0/Ze//IVtttmm/vP5559f/3RHbW0tq6tr\nu02bNvVtN8b999/PPffcw5///Ge23nprBg0aVD8Npm3btkTEKu2uXLmS/v37A6Ukw7rWrvjd737H\nAw88wO23386YMWOYO3cuUEpK1NbWsmjRIrp27dpg3fKf1eo/xw25v6bkFBJJkiRJUqt077330qtX\nL55//nkWLlzIc889x/HHH1//NENjHHHEEVx22WWUduOGRx55pMFyY8aMoba2tsHkxdoccsghXHfd\ndQA89thjzJkzZ40yy5cvp0OHDmy99dY8+eSTPPzww+tss02bNvX9WFfy4r333uP555/n0EMP5Uc/\n+hHLly/n9ddfB6Bv37788pe/ZNiwYfztb39r9P2U++QnP8kNN9zAypUrWbp0KQ888AADBw7cqLYa\nyycwJEmSJEkbbWO2PW0qkyZN4rjjjlsldvzxx3PFFVdwyCGHNKqN733ve3zrW9+iV69evPfee3Tt\n2pU77rijSfr39a9/nS9/+cvsvffe7L333vVPTpQbOnQov/jFL9h7773Zc889OeCAAzbqWoceemj9\nNqq9evXi6quv5otf/CLLly8nM/nmN7+5ypatBx98MGPHjuWoo45a59SUtTnuuOP485//TO/evYkI\nfvzjH/PhD394o/reWFGXZdpcDBgwIGtqapql7f6jJjZLu1q3WT85udJdkKTNSkTMyswBle5HJTTn\nOAKqcyzh31lJq3viiSfYe++9K90NtRIN/feysWMJn8BQq/fX0T0r3YXNTucL5la6C5IkSZI2M822\nBkZEjI+IFyPisbLYTyLiyYiYExG3RMQORbxLRLwVEbXF6xdldfpHxNyIWBAR46JYwSQidoyIaREx\n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\nXr16AOTn5zNo0CAeeeQR/Pz8+O6775g8eTLx8fHlGmNZZWVl0bdvX9LT06s0DhEREREpO83AEBGR\ncvPJJ5+wbds2tmzZwtdff8348eMBaN68ebkkL/Ly8n51HyIiIiJyfqrQBIaZvWJm+8wsvUjZpWa2\nysx2ePzoX8IAACAASURBVP7ZyFNuZvaCme00szQz61jkmdGe9jvMbHSR8k5mts3zzAtmZhX5PiIi\nUjp169Zl/vz5vP322xw6dIisrCyCg4MBiIyMZPv27d623bt3JzExkUOHDjFgwABCQkKIjIwkLS0N\ngBkzZjBy5Ei6du3KyJEjyc/P5/777yc4OJiQkBDmzp0LQFJSEtdeey2dOnWiT58+7N2711veoUMH\nOnTowIsvvljJn4SIiIiIlJeKnoGxEIg9pexBYLVzrhWw2nMP8J9AK8/POOAlKEx4ANOBLkAEMP1k\n0sPT5vYiz506loiIVJH69esTGBjIjh07ipUPGzaMZcuWAbB371727t1LeHg406dPJywsjLS0NB5/\n/HFGjRrlfSYjI4OPPvqIJUuW8PLLL5OVlUVKSgppaWncfPPN5ObmctdddxEfH09SUhJjx47l4Ycf\nBuDWW29l7ty5pKamVt7Li4iIiEi5q9AEhnNuHXDolOL+wKue61eBAUXKF7lCm4CGZtYM6AOscs4d\ncs79AKwCYj119Z1zm5xzDlhUpC8REakGCv/zXNzQoUO9y0mWLVvGkCFDAFi/fj0jR44EoGfPnhw8\neJAff/wRgH79+lGrVi0APvroI8aPH0/NmoXbOF166aV88cUXpKen06tXL0JDQ5k1axZ79uzh8OHD\nHD58mG7dugF4+xcRERGR809VbOLZ1Dm313P9T6Cp5/pyILtIuz2esrOV7ymh/DRmNo7CWR1ceeWV\nvzJ8EREpjSNHjpCVlUXr1q3Jycnxll9++eU0btyYtLQ04uLimD9//i/2VadOnbPWO+do164dGzdu\nLFZ++PDhcwteRERERKqdKt3E0zNz4vS/niv/cV52zoU758L9/f0rejgRkYve0aNHmThxIgMGDKBR\no0an1Q8bNoy//OUv5OTkEBISAkB0dDSLFy8GYM2aNVx22WXUr1//tGd79erF//7v/3o39Dx06BBt\n2rRh//793gRGbm4u27dvp2HDhjRs2JD169cDePsXERERkfNPVczA+N7Mmjnn9nqWgezzlH8LtCjS\n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\nW7cyaNAgAN555x1q1arFzz//zIkTJ7jqqqsA+Oqrr4iNjaVTp05ER0fz+eefA7Br1y6ioqJo3749\njzzyCHJRONMMzpPqUXic+xozywIigRXayFNERKT6qoolJDjnUoCSviDElNDWAXeeoZ9XgFfKNzo5\nXpbNuQAAFNBJREFUVde5XStlnIS7EiplHBEpfzVr1iQsLIytW7dy/PhxunTpQqtWrdiwYQP+/v44\n52jRokWxZ9566y2++OILMjIy+P777wkKCmLs2LGcOHGCMWPGsHr1alq3bs2oUaN46aWXmDRpEikp\nKQB8+umnBAcHs3XrVvLy8ujSpXBlwLhx45g/fz6tWrVi8+bNTJw4kY8//pgpU6Zwxx13MGrUKF58\n8cVK/3ykSmwFWplZIIWJi+HATScrnXM5wGUn781sDXC/cy6xkuMUERGRUqqqGRgiInKBObm3xYYN\nG4iKiiIqKsp7f3L5SFHr1q1jxIgR+Pj40Lx5c3r2LNxz44svviAwMJDWrVsDMHr0aNatW0fNmjX5\n3e9+R2ZmJlu2bOHee+9l3bp1fPrpp0RHR3P06FE2bNjAjTfeSGhoKOPHj2fv3sLDrRISEhgxYgQA\nI0eOrKRPRKqScy4PmETh8tJMYJlzbruZzTSzflUbnYiIiJyLKpmBISIiF56uXbsyf/58Tpw4wZ13\n3om/vz8ZGRn4+/uXmMA4F926deODDz7A19eXP/zhD4wZM4b8/HyefvppCgoKaNiwoXeWxqnMrFxi\nkPOHc24lhUtRi5Y9doa23SsjJhERETl3moEhIiLlIioqik2bNrF//36aNGmCmeHv788777zj3f+i\nqG7duhEXF0d+fj579+7lk08+AaBNmzZkZWWxc+dOAF577TWuvfZaAKKjo3nuueeIiorC39+fgwcP\n8sUXXxAcHEz9+vUJDAxk+fLlQOEeG6mpqUBhcmXp0qUALF68uMI/CxEREREpf5qBISJygSjLsacV\noVGjRvj7+9OuXTtvWVRUFAkJCXTo0OG09gMHDuTjjz8mKCiIK6+8kqioKAD8/PxYsGABN954I3l5\neXTu3JkJEyYA0KVLF77//nu6desGQEhICP/85z+9sysWL17MHXfcwaxZs8jNzWX48OF06NCB559/\nnptuuomnnnqK/v37V/RHISIiIiIVwAr3yLx4hIeHu8TEitmfq9PURRXSb0neqvd0pY01olH9ShlH\n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\n","text/plain":["<Figure size 1080x720 with 6 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"zNGXWAyj1Xfk","colab_type":"code","colab":{}},"source":["\"\"\"\n","Preparing the Data\n","Before data can be used as input for machine learning algorithms, it often must be \n","cleaned, formatted, and restructured — this is typically known as preprocessing. \n","Fortunately, for this dataset, there are no invalid or missing entries we must deal \n","with, however, there are some qualities about certain features that must be adjusted. \n","This preprocessing can help tremendously with the outcome and predictive power of \n","nearly all learning algorithms.\n","\n","\"\"\"\n","\n","#Like we have to convert categorical to numerical features"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"OOoGCFJ81xOw","colab_type":"code","colab":{}},"source":["\"\"\"\n","Transforming Skewed Continuous Features\n","A dataset may sometimes contain at least one feature whose values tend to lie near \n","a single number, but will also have a non-trivial number of vastly larger or smaller \n","values than that single number. Algorithms can be sensitive to such distributions of \n","values and can underperform if the range is not properly normalized. With the census \n","dataset two features fit this description: 'capital-gain' and 'capital-loss'.\n","\n","Run the code cell below to plot a histogram of these two features. Note the range of \n","the values present and how they are distributed.\n","\"\"\""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_h7dDiFG2fZP","colab_type":"code","colab":{}},"source":["# Split the data into features and target label\n","income_raw = df['income']\n","features_raw= df.drop('income', axis = 1)\n","\n","# Visualize skewed continuous features of original data\n","plt.style.use('ggplot')\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"YaFCod_C2w1N","colab_type":"code","colab":{}},"source":["df['capital-loss'].hist(bins=25)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ruhNrP5BIXE4","colab_type":"code","colab":{}},"source":["df['capital-gain'].hist(bins=25)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"nQg0sBbh_7v0","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Bwe68BYQBJW8","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"7gQBXkcDBJJq","colab_type":"code","colab":{}},"source":["\"\"\"\n","For highly-skewed feature distributions such as 'capital-gain' and 'capital-loss', \n","it is common practice to apply a logarithmic transformation on the data so that the \n","very large and very small values do not negatively affect the performance of a \n","learning algorithm. Using a logarithmic transformation significantly reduces the \n","range of values caused by outliers. Care must be taken when applying this \n","transformation however: The logarithm of 0 is undefined, so we must translate the \n","values by a small amount above 0 to apply the the logarithm successfully.\n","\n","Run the code cell below to perform a transformation on the data and visualize the \n","results. Again, note the range of values and how they are distributed.\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ls44jhD1_7iZ","colab_type":"code","colab":{}},"source":["# Log-transform the skewed features\n","skewed = ['capital-gain', 'capital-loss']\n","features_log_transformed = pd.DataFrame(data = features_raw)\n","features_log_transformed[skewed] = features_raw[skewed].apply(lambda x: np.log(x + 1))\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"3ukZ3Pqw_7Kr","colab_type":"code","outputId":"d6d35eed-8244-4a4e-fe6f-3d56edfbdb8c","executionInfo":{"status":"ok","timestamp":1579340143094,"user_tz":-330,"elapsed":1603,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}},"colab":{"base_uri":"https://localhost:8080/","height":419}},"source":["features_log_transformed[skewed]"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>capital-gain</th>\n","      <th>capital-loss</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>7.684784</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>45217</th>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>45218</th>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>45219</th>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>45220</th>\n","      <td>8.604471</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>45221</th>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>45222 rows × 2 columns</p>\n","</div>"],"text/plain":["       capital-gain  capital-loss\n","0          7.684784           0.0\n","1          0.000000           0.0\n","2          0.000000           0.0\n","3          0.000000           0.0\n","4          0.000000           0.0\n","...             ...           ...\n","45217      0.000000           0.0\n","45218      0.000000           0.0\n","45219      0.000000           0.0\n","45220      8.604471           0.0\n","45221      0.000000           0.0\n","\n","[45222 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"code","metadata":{"id":"z1BH3iEH_69Z","colab_type":"code","colab":{}},"source":["\"\"\"\n","Normalizing Numerical Features\n","In addition to performing transformations on features that are highly skewed, \n","it is often good practice to perform some type of scaling on numerical features. \n","Applying a scaling to the data does not change the shape of each feature's \n","distribution (such as 'capital-gain' or 'capital-loss' above); however, normalization \n","ensures that each feature is treated equally when applying supervised learners. \n","Note that once scaling is applied, observing the data in its raw form will no longer \n","have the same original meaning, as exampled below.\n","\n","Run the code cell below to normalize each numerical feature. We will use \n","sklearn.preprocessing.MinMaxScaler for this."],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"17IX-6k9Alo0","colab_type":"code","outputId":"9bc4fae0-fe35-4501-f3f8-9b40ea0472cd","executionInfo":{"status":"ok","timestamp":1579340626117,"user_tz":-330,"elapsed":1141,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}},"colab":{"base_uri":"https://localhost:8080/","height":306}},"source":["# Import sklearn.preprocessing.StandardScaler\n","from sklearn.preprocessing import MinMaxScaler\n","\n","# Initialize a scaler, then apply it to the features\n","scaler = MinMaxScaler() # default=(0, 1)\n","numerical = ['age', 'education-num', 'capital-gain', 'capital-loss', 'hours-per-week']\n","\n","features_log_minmax_transform = pd.DataFrame(data = features_log_transformed)\n","features_log_minmax_transform[numerical] = scaler.fit_transform(features_log_transformed[numerical])\n","\n","# Show an example of a record with scaling applied\n","display(features_log_minmax_transform.head(n = 5))"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>workclass</th>\n","      <th>education_level</th>\n","      <th>education-num</th>\n","      <th>marital-status</th>\n","      <th>occupation</th>\n","      <th>relationship</th>\n","      <th>race</th>\n","      <th>sex</th>\n","      <th>capital-gain</th>\n","      <th>capital-loss</th>\n","      <th>hours-per-week</th>\n","      <th>native-country</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.301370</td>\n","      <td>State-gov</td>\n","      <td>Bachelors</td>\n","      <td>0.800000</td>\n","      <td>Never-married</td>\n","      <td>Adm-clerical</td>\n","      <td>Not-in-family</td>\n","      <td>White</td>\n","      <td>Male</td>\n","      <td>0.667492</td>\n","      <td>0.0</td>\n","      <td>0.397959</td>\n","      <td>United-States</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.452055</td>\n","      <td>Self-emp-not-inc</td>\n","      <td>Bachelors</td>\n","      <td>0.800000</td>\n","      <td>Married-civ-spouse</td>\n","      <td>Exec-managerial</td>\n","      <td>Husband</td>\n","      <td>White</td>\n","      <td>Male</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.122449</td>\n","      <td>United-States</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.287671</td>\n","      <td>Private</td>\n","      <td>HS-grad</td>\n","      <td>0.533333</td>\n","      <td>Divorced</td>\n","      <td>Handlers-cleaners</td>\n","      <td>Not-in-family</td>\n","      <td>White</td>\n","      <td>Male</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.397959</td>\n","      <td>United-States</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.493151</td>\n","      <td>Private</td>\n","      <td>11th</td>\n","      <td>0.400000</td>\n","      <td>Married-civ-spouse</td>\n","      <td>Handlers-cleaners</td>\n","      <td>Husband</td>\n","      <td>Black</td>\n","      <td>Male</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.397959</td>\n","      <td>United-States</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.150685</td>\n","      <td>Private</td>\n","      <td>Bachelors</td>\n","      <td>0.800000</td>\n","      <td>Married-civ-spouse</td>\n","      <td>Prof-specialty</td>\n","      <td>Wife</td>\n","      <td>Black</td>\n","      <td>Female</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.397959</td>\n","      <td>Cuba</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["        age          workclass  ... hours-per-week  native-country\n","0  0.301370          State-gov  ...       0.397959   United-States\n","1  0.452055   Self-emp-not-inc  ...       0.122449   United-States\n","2  0.287671            Private  ...       0.397959   United-States\n","3  0.493151            Private  ...       0.397959   United-States\n","4  0.150685            Private  ...       0.397959            Cuba\n","\n","[5 rows x 13 columns]"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"ymjradW1AlM2","colab_type":"code","colab":{}},"source":["\"\"\"\n","Implementation: Data Preprocessing\n","From the table in Exploring the Data above, we can see there are several features \n","for each record that are non-numeric. Typically, learning algorithms expect input to \n","be numeric, which requires that non-numeric features (called categorical variables) \n","be converted. One popular way to convert categorical variables is by using the \n","one-hot encoding scheme. One-hot encoding creates a \"dummy\" variable for each \n","possible category of each non-numeric feature. \n","\n","\n","Additionally, as with the non-numeric features, we need to convert the non-numeric \n","target label, 'income' to numerical values for the learning algorithm to work. \n","Since there are only two possible categories for this label (\"<=50K\" and \">50K\"), \n","we can avoid using one-hot encoding and simply encode these two categories as 0 and 1, \n","respectively. In code cell below, you will need to implement the following:\n","\n","Use pandas.get_dummies() to perform one-hot encoding on the \n","'features_log_minmax_transform' data.\n","Convert the target label 'income_raw' to numerical entries.\n","Set records with \"<=50K\" to 0 and records with \">50K\" to 1\n","\n","\"\"\""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"uDWVDEMvDSvm","colab_type":"code","outputId":"b406bc95-8f4f-42b6-ac14-51580c04649b","executionInfo":{"status":"ok","timestamp":1579340997601,"user_tz":-330,"elapsed":1108,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}},"colab":{"base_uri":"https://localhost:8080/","height":136}},"source":["# TODO: One-hot encode the 'features_log_minmax_transform' data using pandas.get_dummies()\n","features_final = pd.get_dummies(features_log_minmax_transform)\n","\n","# TODO: Encode the 'income_raw' data to numerical values\n","income = income_raw.apply(lambda x: 1 if x == \">50K\" else 0)\n","\n","# Print the number of features after one-hot encoding\n","encoded = list(features_final.columns)\n","print(\"{} total features after one-hot encoding.\".format(len(encoded)))\n","\n","# Uncomment the following line to see the encoded feature names\n","# print(encoded)\n","print(income.head())"],"execution_count":0,"outputs":[{"output_type":"stream","text":["103 total features after one-hot encoding.\n","0    0\n","1    0\n","2    0\n","3    0\n","4    0\n","Name: income, dtype: int64\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"IyJ6qbquDx7a","colab_type":"code","outputId":"3920694f-d444-4b9d-a706-317daa8346b3","executionInfo":{"status":"ok","timestamp":1579341014003,"user_tz":-330,"elapsed":1367,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}},"colab":{"base_uri":"https://localhost:8080/","height":321}},"source":["features_final.head()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>education-num</th>\n","      <th>capital-gain</th>\n","      <th>capital-loss</th>\n","      <th>hours-per-week</th>\n","      <th>workclass_ Federal-gov</th>\n","      <th>workclass_ Local-gov</th>\n","      <th>workclass_ Private</th>\n","      <th>workclass_ Self-emp-inc</th>\n","      <th>workclass_ Self-emp-not-inc</th>\n","      <th>workclass_ State-gov</th>\n","      <th>workclass_ Without-pay</th>\n","      <th>education_level_ 10th</th>\n","      <th>education_level_ 11th</th>\n","      <th>education_level_ 12th</th>\n","      <th>education_level_ 1st-4th</th>\n","      <th>education_level_ 5th-6th</th>\n","      <th>education_level_ 7th-8th</th>\n","      <th>education_level_ 9th</th>\n","      <th>education_level_ Assoc-acdm</th>\n","      <th>education_level_ Assoc-voc</th>\n","      <th>education_level_ Bachelors</th>\n","      <th>education_level_ Doctorate</th>\n","      <th>education_level_ HS-grad</th>\n","      <th>education_level_ Masters</th>\n","      <th>education_level_ Preschool</th>\n","      <th>education_level_ Prof-school</th>\n","      <th>education_level_ Some-college</th>\n","      <th>marital-status_ Divorced</th>\n","      <th>marital-status_ Married-AF-spouse</th>\n","      <th>marital-status_ Married-civ-spouse</th>\n","      <th>marital-status_ Married-spouse-absent</th>\n","      <th>marital-status_ Never-married</th>\n","      <th>marital-status_ Separated</th>\n","      <th>marital-status_ Widowed</th>\n","      <th>occupation_ Adm-clerical</th>\n","      <th>occupation_ Armed-Forces</th>\n","      <th>occupation_ Craft-repair</th>\n","      <th>occupation_ Exec-managerial</th>\n","      <th>occupation_ Farming-fishing</th>\n","      <th>...</th>\n","      <th>native-country_ Canada</th>\n","      <th>native-country_ China</th>\n","      <th>native-country_ Columbia</th>\n","      <th>native-country_ Cuba</th>\n","      <th>native-country_ Dominican-Republic</th>\n","      <th>native-country_ Ecuador</th>\n","      <th>native-country_ El-Salvador</th>\n","      <th>native-country_ England</th>\n","      <th>native-country_ France</th>\n","      <th>native-country_ Germany</th>\n","      <th>native-country_ Greece</th>\n","      <th>native-country_ Guatemala</th>\n","      <th>native-country_ Haiti</th>\n","      <th>native-country_ Holand-Netherlands</th>\n","      <th>native-country_ Honduras</th>\n","      <th>native-country_ Hong</th>\n","      <th>native-country_ Hungary</th>\n","      <th>native-country_ India</th>\n","      <th>native-country_ Iran</th>\n","      <th>native-country_ Ireland</th>\n","      <th>native-country_ Italy</th>\n","      <th>native-country_ Jamaica</th>\n","      <th>native-country_ Japan</th>\n","      <th>native-country_ Laos</th>\n","      <th>native-country_ Mexico</th>\n","      <th>native-country_ Nicaragua</th>\n","      <th>native-country_ Outlying-US(Guam-USVI-etc)</th>\n","      <th>native-country_ Peru</th>\n","      <th>native-country_ Philippines</th>\n","      <th>native-country_ Poland</th>\n","      <th>native-country_ Portugal</th>\n","      <th>native-country_ Puerto-Rico</th>\n","      <th>native-country_ Scotland</th>\n","      <th>native-country_ South</th>\n","      <th>native-country_ Taiwan</th>\n","      <th>native-country_ Thailand</th>\n","      <th>native-country_ Trinadad&amp;Tobago</th>\n","      <th>native-country_ United-States</th>\n","      <th>native-country_ Vietnam</th>\n","      <th>native-country_ Yugoslavia</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.301370</td>\n","      <td>0.800000</td>\n","      <td>0.667492</td>\n","      <td>0.0</td>\n","      <td>0.397959</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.452055</td>\n","      <td>0.800000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.122449</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.287671</td>\n","      <td>0.533333</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.397959</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.493151</td>\n","      <td>0.400000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.397959</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.150685</td>\n","      <td>0.800000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.397959</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 103 columns</p>\n","</div>"],"text/plain":["        age  education-num  ...  native-country_ Vietnam  native-country_ Yugoslavia\n","0  0.301370       0.800000  ...                        0                           0\n","1  0.452055       0.800000  ...                        0                           0\n","2  0.287671       0.533333  ...                        0                           0\n","3  0.493151       0.400000  ...                        0                           0\n","4  0.150685       0.800000  ...                        0                           0\n","\n","[5 rows x 103 columns]"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"code","metadata":{"id":"BtxiqnJJD14h","colab_type":"code","outputId":"59b76355-4f9c-480d-db1b-d0285a5901fa","executionInfo":{"status":"ok","timestamp":1579341066850,"user_tz":-330,"elapsed":1670,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["features_final.columns"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['age', 'education-num', 'capital-gain', 'capital-loss',\n","       'hours-per-week', 'workclass_ Federal-gov', 'workclass_ Local-gov',\n","       'workclass_ Private', 'workclass_ Self-emp-inc',\n","       'workclass_ Self-emp-not-inc',\n","       ...\n","       'native-country_ Portugal', 'native-country_ Puerto-Rico',\n","       'native-country_ Scotland', 'native-country_ South',\n","       'native-country_ Taiwan', 'native-country_ Thailand',\n","       'native-country_ Trinadad&Tobago', 'native-country_ United-States',\n","       'native-country_ Vietnam', 'native-country_ Yugoslavia'],\n","      dtype='object', length=103)"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"code","metadata":{"id":"xFKvSaivECgj","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ojdBx5JxEGrL","colab_type":"text"},"source":["Shuffle and Split Data\n","Now all categorical variables have been converted into numerical features, and all numerical features have been normalized. As always, we will now split the data (both features and their labels) into training and test sets. 80% of the data will be used for training and 20% for testing.\n","\n","Run the code cell below to perform this split."]},{"cell_type":"code","metadata":{"id":"rulMI0GoEPe1","colab_type":"code","outputId":"fef1d72e-02ba-4f00-abdc-3f19425003b5","executionInfo":{"status":"ok","timestamp":1579341199973,"user_tz":-330,"elapsed":1479,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["from sklearn.model_selection import train_test_split\n","\n","X_train, X_test, y_train, y_test = train_test_split(features_final, \n","                                                    income, \n","                                                    test_size = 0.2, \n","                                                    random_state = 0)\n","# Show the results of the split\n","print(\"Training set has {} samples.\".format(X_train.shape[0]))\n","print(\"Testing set has {} samples.\".format(X_test.shape[0]))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Training set has 36177 samples.\n","Testing set has 9045 samples.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"OUHNQOFYEvEQ","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-QGG-DMxE3iq","colab_type":"text"},"source":["Evaluating Model Performance\n","In this section, we will investigate four different algorithms, and determine which is best at modeling the data. Three of these algorithms will be supervised learners of your choice, and the fourth algorithm is known as a naive predictor."]},{"cell_type":"code","metadata":{"id":"cU39sgSiE5B-","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"kCa1NTdRuEJA","colab_type":"text"},"source":["### Metrics and the Naive Predictor\n","*CharityML*, equipped with their research, knows individuals that make more than \\$50,000 are most likely to donate to their charity. Because of this, *CharityML* is particularly interested in predicting who makes more than \\$50,000 accurately. It would seem that using **accuracy** as a metric for evaluating a particular model's performace would be appropriate. Additionally, identifying someone that *does not* make more than \\$50,000 as someone who does would be detrimental to *CharityML*, since they are looking to find individuals willing to donate. Therefore, a model's ability to precisely predict those that make more than \\$50,000 is *more important* than the model's ability to **recall** those individuals. We can use **F-beta score** as a metric that considers both precision and recall:\n","\n","$$ F_{\\beta} = (1 + \\beta^2) \\cdot \\frac{precision \\cdot recall}{\\left( \\beta^2 \\cdot precision \\right) + recall} $$\n","\n","In particular, when $\\beta = 0.5$, more emphasis is placed on precision. This is called the **F$_{0.5}$ score** (or F-score for simplicity).\n","\n","Looking at the distribution of classes (those who make at most \\$50,000, and those who make more), it's clear most individuals do not make more than \\$50,000. This can greatly affect **accuracy**, since we could simply say *\"this person does not make more than \\$50,000\"* and generally be right, without ever looking at the data! Making such a statement would be called **naive**, since we have not considered any information to substantiate the claim. It is always important to consider the *naive prediction* for your data, to help establish a benchmark for whether a model is performing well. That been said, using that prediction would be pointless: If we predicted all people made less than \\$50,000, *CharityML* would identify no one as donors. \n","\n","\n","#### Note: Recap of accuracy, precision, recall\n","\n","** Accuracy ** measures how often the classifier makes the correct prediction. It’s the ratio of the number of correct predictions to the total number of predictions (the number of test data points).\n","\n","** Precision ** tells us what proportion of messages we classified as spam, actually were spam.\n","It is a ratio of true positives(words classified as spam, and which are actually spam) to all positives(all words classified as spam, irrespective of whether that was the correct classificatio), in other words it is the ratio of\n","\n","`[True Positives/(True Positives + False Positives)]`\n","\n","** Recall(sensitivity)** tells us what proportion of messages that actually were spam were classified by us as spam.\n","It is a ratio of true positives(words classified as spam, and which are actually spam) to all the words that were actually spam, in other words it is the ratio of\n","\n","`[True Positives/(True Positives + False Negatives)]`\n","\n","For classification problems that are skewed in their classification distributions like in our case, for example if we had a 100 text messages and only 2 were spam and the rest 98 weren't, accuracy by itself is not a very good metric. We could classify 90 messages as not spam(including the 2 that were spam but we classify them as not spam, hence they would be false negatives) and 10 as spam(all 10 false positives) and still get a reasonably good accuracy score. For such cases, precision and recall come in very handy. These two metrics can be combined to get the F1 score, which is weighted average(harmonic mean) of the precision and recall scores. This score can range from 0 to 1, with 1 being the best possible F1 score(we take the harmonic mean as we are dealing with ratios)."]},{"cell_type":"code","metadata":{"id":"Pr4s8i71FIbP","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"65m0Uu_uuEJB","colab_type":"text"},"source":["### Question 1 - Naive Predictor Performace\n","* If we chose a model that always predicted an individual made more than $50,000, what would  that model's accuracy and F-score be on this dataset? You must use the code cell below and assign your results to `'accuracy'` and `'fscore'` to be used later.\n","\n","** Please note ** that the the purpose of generating a naive predictor is simply to show what a base model without any intelligence would look like. In the real world, ideally your base model would be either the results of a previous model or could be based on a research paper upon which you are looking to improve. When there is no benchmark model set, getting a result better than random choice is a place you could start from.\n","\n","** HINT: ** \n","\n","* When we have a model that always predicts '1' (i.e. the individual makes more than 50k) then our model will have no True Negatives(TN) or False Negatives(FN) as we are not making any negative('0' value) predictions. Therefore our Accuracy in this case becomes the same as our Precision(True Positives/(True Positives + False Positives)) as every prediction that we have made with value '1' that should have '0' becomes a False Positive; therefore our denominator in this case is the total number of records we have in total. \n","* Our Recall score(True Positives/(True Positives + False Negatives)) in this setting becomes 1 as we have no False Negatives."]},{"cell_type":"code","metadata":{"id":"TjrM6tx_JNb3","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"IW2_d9WKuEJC","colab_type":"code","outputId":"9ffa4d9c-bf01-4aa6-d499-8eeeddc0af55","executionInfo":{"status":"ok","timestamp":1579343980672,"user_tz":-330,"elapsed":1480,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["'''\n","TP = np.sum(income) # Counting the ones as this is the naive case. Note that 'income' is the 'income_raw' data \n","encoded to numerical values done in the data preprocessing step.\n","FP = income.count() - TP # Specific to the naive case\n","\n","TN = 0 # No predicted negatives in the naive case\n","FN = 0 # No predicted negatives in the naive case\n","'''\n","# TODO: Calculate accuracy, precision and recall\n","accuracy = np.sum(income == 1) / len(income)\n","recall = 1\n","precision = accuracy\n","\n","# TODO: Calculate F-score using the formula above for beta = 0.5 and correct values for \n","#precision and recall.\n","beta = 0.5\n","fscore = (1 + beta ** 2) * (accuracy * recall) / (beta ** 2 * accuracy + recall)\n","\n","# Print the results \n","print(\"Naive Predictor: [Accuracy score: {:.4f}, F-score: {:.4f}]\".format(accuracy, fscore))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Naive Predictor: [Accuracy score: 0.2478, F-score: 0.2917]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"cp8mMYxuPKGj","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GYcbUiPLuEJG","colab_type":"text"},"source":["###  Supervised Learning Models\n","**The following are some of the supervised learning models that are currently available in** [`scikit-learn`](http://scikit-learn.org/stable/supervised_learning.html) **that you may choose from:**\n","- Gaussian Naive Bayes (GaussianNB)\n","- Decision Trees\n","- Ensemble Methods (Bagging, AdaBoost, Random Forest, Gradient Boosting)\n","- K-Nearest Neighbors (KNeighbors)\n","- Stochastic Gradient Descent Classifier (SGDC)\n","- Support Vector Machines (SVM)\n","- Logistic Regression"]},{"cell_type":"code","metadata":{"id":"Gk0Es0vyPRwt","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Rz_EWNEEuEJH","colab_type":"text"},"source":["### Question 2 - Model Application\n","List three of the supervised learning models above that are appropriate for this problem that you will test on the census data. For each model chosen\n","\n","- Describe one real-world application in industry where the model can be applied. \n","- What are the strengths of the model; when does it perform well?\n","- What are the weaknesses of the model; when does it perform poorly?\n","- What makes this model a good candidate for the problem, given what you know about the data?\n","\n","** HINT: **\n","\n","Structure your answer in the same format as above^, with 4 parts for each of the three models you pick. Please include references with your answer."]},{"cell_type":"code","metadata":{"id":"5XIHoGSEQG1b","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LR-zq4FnuEJI","colab_type":"text"},"source":["**Answer: **\n","Ensemble methods are learning algorithms that construct a group of classifiers and then classify new data points by taking a (weighted) vote of their predictions. From the class video, we've got an intuition that ensemble methods can achieve a better performance. So I choose random forest and gradient boosting in the esemble family. The third method I choose is logistic regression, which is a classical method for classification problem. Want to take a look how this one compare with the other two.\n","In our condition, as we have a really large data with a lot of features, the following three models are good at handling large dataset and achieve accurate result."]},{"cell_type":"code","metadata":{"id":"bQyrDPhrSdh2","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Of1w6nQJuEJJ","colab_type":"text"},"source":["**1. Random Forest: **\n","- **Real-World Application:** Remote sensing (is a process to acquire, prepare, and decipher information of spectral and spatio-temporal nature on objects, phenomenon or areas under investigation without being in direct physical contact.) [A link of a review paper](http://scikit-learn.org/stable/modules/classes.html#sklearn-metrics-metrics).\n","- **Strengths:** Overcome overfitiing compare with decision tree. High flexibility and accuracy. Can deal with unbalanced and missing data.\n","- **Weakness:**  When you have a large collection of decision trees it is hard to have an intuitive grasp of the relationship existing in the input data. Higher complexity.\n","- **Candidacy:** Random Forest is always a good start with such classification problem."]},{"cell_type":"code","metadata":{"id":"wCB1vgdLSfJ7","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zaU3uGxsuEJK","colab_type":"text"},"source":["**2. Gradient Boosting: **\n","- **Real-World Application:** [Improving the separation of direct and diffuse solar radiation components using machine learning by gradient boosting](https://www.sciencedirect.com/science/article/pii/S0038092X17303870). WOW, this is how machine learning can be useful in all type of studies.\n","- **Strengths:** Really powerful and normally outperform Random Forest. Typically using Decision Tree as weak leaner, but any other weak learner should also be used in a well coded gradient boosting algorithm. Gradient Boosting also able to handle different types of variable and also missing data.\n","- **Weakness:**  Gradient Boosting has more hyper-parameters to tune than many other algorithms. Also more prone to overfitting. Very computational expensive.\n","- **Candidacy:** With this sufficiently large dataset, gradient boosting is definetly worth trying."]},{"cell_type":"code","metadata":{"id":"qFQEmATuSizy","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RzuY_CamuEJL","colab_type":"text"},"source":["**3. Logistic Regression: **\n","- **Real-World Application:** Logistic regression has already been widely used in binary classification problems. [Landslide susceptibility mapping using certainty factor, index of entropy and logistic regression models in GIS and their comparison at Mugling–Narayanghat road section in Nepal Himalaya](https://link.springer.com/article/10.1007/S11069-012-0347-6). \n","- **Strengths:**  Easy to implement and very efficient to train. Can be used to start with as a benchmark before more complicated models.\n","- **Weakness:**  Logistic Regression is a generalized linear model, it's a strengths or weakness based on the context. \n","- **Candidacy:** Also a good start with classic logistic regression. And we have a pretty clean dataset."]},{"cell_type":"markdown","metadata":{"id":"Y9Od21A4Uan0","colab_type":"text"},"source":[""]},{"cell_type":"markdown","metadata":{"id":"7ZF92EK_uEJM","colab_type":"text"},"source":["### Implementation - Creating a Training and Predicting Pipeline\n","To properly evaluate the performance of each model you've chosen, it's important that you create a training and predicting pipeline that allows you to quickly and effectively train models using various sizes of training data and perform predictions on the testing data. Your implementation here will be used in the following section.\n","In the code block below, you will need to implement the following:\n"," - Import `fbeta_score` and `accuracy_score` from [`sklearn.metrics`](http://scikit-learn.org/stable/modules/classes.html#sklearn-metrics-metrics).\n"," - Fit the learner to the sampled training data and record the training time.\n"," - Perform predictions on the test data `X_test`, and also on the first 300 training points `X_train[:300]`.\n","   - Record the total prediction time.\n"," - Calculate the accuracy score for both the training subset and testing set.\n"," - Calculate the F-score for both the training subset and testing set.\n","   - Make sure that you set the `beta` parameter!"]},{"cell_type":"code","metadata":{"id":"40W4JC9WUcQa","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"yCQNnQ7wuEJN","colab_type":"code","colab":{}},"source":["# TODO: Import two metrics from sklearn - fbeta_score and accuracy_score\n","from sklearn.metrics import fbeta_score, accuracy_score\n","def train_predict(learner, sample_size, X_train, y_train, X_test, y_test): \n","    '''\n","    inputs:\n","       - learner: the learning algorithm to be trained and predicted on\n","       - sample_size: the size of samples (number) to be drawn from training set\n","       - X_train: features training set\n","       - y_train: income training set\n","       - X_test: features testing set\n","       - y_test: income testing set\n","    '''\n","    \n","    results = {}\n","    \n","    # TODO: Fit the learner to the training data using slicing with 'sample_size' \n","    #using .fit(training_features[:], training_labels[:])\n","    start = time() # Get start time\n","    learner = learner.fit(X_train[:sample_size], y_train[:sample_size])\n","    end = time() # Get end time\n","    \n","    # TODO: Calculate the training time\n","    results['train_time'] = end - start\n","        \n","    # TODO: Get the predictions on the test set(X_test),\n","    #       then get predictions on the first 300 training samples(X_train) \n","    #using .predict()\n","    start = time() # Get start time\n","    predictions_test = learner.predict(X_test)\n","    predictions_train = learner.predict(X_train[:300])\n","    end = time() # Get end time\n","    \n","    # TODO: Calculate the total prediction time\n","    results['pred_time'] = end - start\n","            \n","    # TODO: Compute accuracy on the first 300 training samples which is y_train[:300]\n","    results['acc_train'] = accuracy_score(y_train[:300], predictions_train)\n","        \n","    # TODO: Compute accuracy on test set using accuracy_score()\n","    results['acc_test'] = accuracy_score(y_test, predictions_test)\n","    \n","    # TODO: Compute F-score on the the first 300 training samples using fbeta_score()\n","    results['f_train'] = fbeta_score(y_train[:300], predictions_train, 0.5)\n","        \n","    # TODO: Compute F-score on the test set which is y_test\n","    results['f_test'] = fbeta_score(y_test, predictions_test, 0.5)\n","       \n","    # Success\n","    print(\"{} trained on {} samples.\".format(learner.__class__.__name__, sample_size))\n","        \n","    # Return the results\n","    return results"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FHXV_SPguEJQ","colab_type":"text"},"source":["### Implementation: Initial Model Evaluation\n","In the code cell, you will need to implement the following:\n","- Import the three supervised learning models you've discussed in the previous section.\n","- Initialize the three models and store them in `'clf_A'`, `'clf_B'`, and `'clf_C'`.\n","  - Use a `'random_state'` for each model you use, if provided.\n","  - **Note:** Use the default settings for each model — you will tune one specific model in a later section.\n","- Calculate the number of records equal to 1%, 10%, and 100% of the training data.\n","  - Store those values in `'samples_1'`, `'samples_10'`, and `'samples_100'` respectively.\n","\n","**Note:** Depending on which algorithms you chose, the following implementation may take some time to run!"]},{"cell_type":"code","metadata":{"id":"WDd9XXR-WlpF","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kChM4k1DuEJR","colab_type":"code","outputId":"1d35bf54-f950-4dd2-819c-959d746c7cf4","executionInfo":{"status":"ok","timestamp":1579346176580,"user_tz":-330,"elapsed":19519,"user":{"displayName":"Venkatesh Nagandla","photoUrl":"","userId":"00105523213734113975"}},"colab":{"base_uri":"https://localhost:8080/","height":306}},"source":["# TODO: Import the three supervised learning models from sklearn\n","from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n","from sklearn.linear_model import LogisticRegression\n","# TODO: Initialize the three models\n","clf_A = RandomForestClassifier(random_state=1)\n","clf_B = GradientBoostingClassifier(random_state=2)\n","clf_C = LogisticRegression(random_state=3)\n","\n","# TODO: Calculate the number of samples for 1%, 10%, and 100% of the training data\n","# HINT: samples_100 is the entire training set i.e. len(y_train)\n","# HINT: samples_10 is 10% of samples_100 (ensure to set the count of the values \n","#to be `int` and not `float`)\n","# HINT: samples_1 is 1% of samples_100 (ensure to set the count of the values \n","#to be `int` and not `float`)\n","samples_100 = len(y_train)\n","samples_10 = len(y_train) // 10\n","samples_1 = len(y_train) // 100\n","\n","# Collect results on the learners\n","results = {}\n","for clf in [clf_A, clf_B, clf_C]:\n","    clf_name = clf.__class__.__name__\n","    results[clf_name] = {}\n","    for i, samples in enumerate([samples_1, samples_10, samples_100]):\n","        results[clf_name][i] = \\\n","        train_predict(clf, samples, X_train, y_train, X_test, y_test)\n","\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["RandomForestClassifier trained on 361 samples.\n","RandomForestClassifier trained on 3617 samples.\n","RandomForestClassifier trained on 36177 samples.\n","GradientBoostingClassifier trained on 361 samples.\n","GradientBoostingClassifier trained on 3617 samples.\n","GradientBoostingClassifier trained on 36177 samples.\n","LogisticRegression trained on 361 samples.\n","LogisticRegression trained on 3617 samples.\n","LogisticRegression trained on 36177 samples.\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"RbiU5BFsXZ6j","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Xs94muiGuEJT","colab_type":"text"},"source":["----\n","## Improving Results\n","In this final section, you will choose from the three supervised learning models the *best* model to use on the student data. You will then perform a grid search optimization for the model over the entire training set (`X_train` and `y_train`) by tuning at least one parameter to improve upon the untuned model's F-score. "]},{"cell_type":"code","metadata":{"id":"RyJRyWn1Ygxz","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ILg6EwvZYgiu","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"13r3CmvEuEJV","colab_type":"text"},"source":["### Question 3 - Choosing the Best Model\n","\n","* Based on the evaluation you performed earlier, in one to two paragraphs, explain to *CharityML* which of the three models you believe to be most appropriate for the task of identifying individuals that make more than \\$50,000. \n","\n","** HINT: ** \n","Look at the graph at the bottom left from the cell above(the visualization created by `vs.evaluate(results, accuracy, fscore)`) and check the F score for the testing set when 100% of the training set is used. Which model has the highest score? Your answer should include discussion of the:\n","* metrics - F score on the testing when 100% of the training data is used, \n","* prediction/training time\n","* the algorithm's suitability for the data."]},{"cell_type":"code","metadata":{"id":"Ip80HPxzY-eq","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"h2-H2SvouEJX","colab_type":"text"},"source":["**Answer: **\n","Out of the three chosen models, **Gradient Boosting** is the winner.\n","- **Accuracy Score:** The top graph shows Random Forest has the highest test score but it is a huge overfitting result. While gradient boosting achieve highest score in all three cases towards testing data.\n","\n","- **F Score:** Similar to accuracy, gradient boosting is best in F score as well. And in our case, this score is the most important one we need to focus on. (Although needs some adjustment later)\n","\n","- **Time:** We can see gradient boosting takes longest time in training but predicting time is similar to the other two models. But the difference is not that large and pretty acceptable.\n","\n","After one-hot endcoding, we have 103 total features and this is what Gradient Boosting needs. Weak learners (decision tree) will be built based on each feature and ensembled in the end to finalize the Gradient Boosting model.\n","Finally, I would conclude that **Gradient Boosting** is the best out of three."]},{"cell_type":"code","metadata":{"id":"5rmXFELEZ0ms","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"STF9hMdmuEJY","colab_type":"text"},"source":["### Question 4 - Describing the Model in Layman's Terms\n","\n","* In one to two paragraphs, explain to *CharityML*, in layman's terms, how the final model chosen is supposed to work. Be sure that you are describing the major qualities of the model, such as how the model is trained and how the model makes a prediction. Avoid using advanced mathematical jargon, such as describing equations.\n","\n","** HINT: **\n","\n","When explaining your model, if using external resources please include all citations."]},{"cell_type":"code","metadata":{"id":"rQR9NkPKaBIy","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pCEnmt0SuEJZ","colab_type":"text"},"source":["**Answer: **\n","\n","> Indented block\n","\n","\n","\n","\n","In other to understand how Gradient Boosting work, we need to know what is decision tree and what is weak learner. Let's start with decision tree.\n","\n","A **decision tree** is a flowchart-like structure in which each internal node represents a \"test\" on an attribute (e.g. whether a coin flip comes up heads or tails), each branch represents the outcome of the test, and each leaf node represents a class label (decision taken after computing all attributes). The paths from root to leaf represent classification rules. In our census data, we have 103 features after one-hot encoding to build up decision tree. For example, we can set a node as 'sex' and decide which direction to go whether this person is 'Male' or 'Female'. In addition to this, we can add more nodes like 'education_level' to advance our decision. At the end of the tree, we might predict a 'Male' with 'phD' degree has a higher chance to become a donor than a 'Female' with 'College' degree.\n","\n","A **weak learner** is any machine learning algorithm that gives better accuracy than simply guessing. For example, if we are trying to identify the type of flowers in a park. If we are just identifying all the flowers as 'rose', this algorithm would not be a weak leaner as the probably is not better than guessing. If we have another algorithm which can identify rose most of the time but not so good identifying other flowers like 'tulip'. This algorithm will be a weak learner as it is better than guessing is some area.\n","\n","The next step is to understand how **Gradient Boosting** works and how it is related to **decision tree** and **weak learner**.\n","\n","**Boosting** algorithms typically work by solving subsections of the problem, by peeling them away so future boosting iterations can solve the remaining sections. Imagine we have assembly line, each person normally work on the same part of the assembly line all the time. Which means each person is more familiar with their own task and specialize at certain task. The takeaway is that weak learners are best combined in a way that allows each one to solve a limited section of the problem. The most commonly used **weak learner** is **decision tree** while any other machine learning can be used as weak learner as well.\n","\n","In our case, we can combine weak learners who are good at identifying whether the person is a donor based on different features. These learners are **weak learner** becuase they might made their decision only based on one or two features and the prediction is not accurate sometime. So during the training process, **Gradient Boosting** is actually build decision tree one by one. And the later trees are built based on the performance of the previous tree, vasious parameters are tuned to finish this process. In the end, we can achieve the final model which is an ensemble of a set of weak decision trees. And in this final model, all the weak learners make their vote to achive the final result whether an individual earns above 50k or not."]},{"cell_type":"code","metadata":{"id":"asMlDd3kakuL","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2m9LxHFy3IUW","colab_type":"text"},"source":["### Implementation: Model Tuning\n","Fine tune the chosen model. Use grid search (`GridSearchCV`) with at least one important parameter tuned with at least 3 different values. You will need to use the entire training set for this. In the code cell below, you will need to implement the following:\n","- Import [`sklearn.grid_search.GridSearchCV`](http://scikit-learn.org/0.17/modules/generated/sklearn.grid_search.GridSearchCV.html) and [`sklearn.metrics.make_scorer`](http://scikit-learn.org/stable/modules/generated/sklearn.metrics.make_scorer.html).\n","- Initialize the classifier you've chosen and store it in `clf`.\n"," - Set a `random_state` if one is available to the same state you set before.\n","- Create a dictionary of parameters you wish to tune for the chosen model.\n"," - Example: `parameters = {'parameter' : [list of values]}`.\n"," - **Note:** Avoid tuning the `max_features` parameter of your learner if that parameter is available!\n","- Use `make_scorer` to create an `fbeta_score` scoring object (with $\\beta = 0.5$).\n","- Perform grid search on the classifier `clf` using the `'scorer'`, and store it in `grid_obj`.\n","- Fit the grid search object to the training data (`X_train`, `y_train`), and store it in `grid_fit`.\n","\n","**Note:** Depending on the algorithm chosen and the parameter list, the following implementation may take some time to run!"]},{"cell_type":"code","metadata":{"id":"6-5rjsFY4XUF","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kwbNqb5v3-eI","colab_type":"code","outputId":"78b61c21-728d-4323-d7c5-edc91a25a498","colab":{}},"source":["# Reviewer Hint: Try StratifiedShuffleSplit\n","\n","# Import 'GridSearchCV', 'make_scorer', and any other necessary libraries\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.metrics import make_scorer\n","\n","# Initialize the classifier\n","clf = GradientBoostingClassifier(random_state=0)\n","\n","# Create the parameters list you wish to tune, using a dictionary if needed.\n","# HINT: parameters = {'parameter_1': [value1, value2], 'parameter_2': [value1, value2]}\n","parameters = { 'max_depth': np.arange(2,10,2), \n","               'min_samples_leaf': [3, 5, 10], \n","               'n_estimators': [100, 150, 200]  }\n","\n","# Make an fbeta_score scoring object using make_scorer()\n","scorer = make_scorer(fbeta_score, beta=0.5)\n","\n","# Perform grid search on the classifier using 'scorer' as the scoring method using GridSearchCV()\n","grid_obj = GridSearchCV(clf, parameters, scoring=scorer, n_jobs=10, verbose=10)\n","\n","# Fit the grid search object to the training data and find the optimal parameters using fit()\n","grid_fit = grid_obj.fit(X_train, y_train)\n","\n","# Get the estimator\n","best_clf = grid_fit.best_estimator_\n","\n","print(\"Best parameters: \")\n","\n","# Make predictions using the unoptimized and model\n","predictions = (clf.fit(X_train, y_train)).predict(X_test)\n","best_predictions = best_clf.predict(X_test)\n","\n","# Report the before-and-afterscores\n","print(\"Unoptimized model\\n------\")\n","print(\"Accuracy score on testing data: {:.4f}\".format(accuracy_score(y_test, predictions)))\n","print(\"F-score on testing data: {:.4f}\".format(fbeta_score(y_test, predictions, beta = 0.5)))\n","print(\"\\nOptimized Model\\n------\")\n","print(\"Final accuracy score on the testing data: {:.4f}\".format(accuracy_score(y_test, best_predictions)))\n","print(\"Final F-score on the testing data: {:.4f}\".format(fbeta_score(y_test, best_predictions, beta = 0.5)))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Fitting 3 folds for each of 36 candidates, totalling 108 fits\n","[CV] max_depth=2, min_samples_leaf=3, n_estimators=100 ...............\n","[CV] max_depth=2, min_samples_leaf=3, n_estimators=100 ...............\n","[CV] max_depth=2, min_samples_leaf=3, n_estimators=100 ...............\n","[CV] max_depth=2, min_samples_leaf=3, n_estimators=150 ...............\n","[CV] max_depth=2, min_samples_leaf=3, n_estimators=150 ...............\n","[CV] max_depth=2, min_samples_leaf=3, n_estimators=150 ...............\n","[CV] max_depth=2, min_samples_leaf=3, n_estimators=200 ...............\n","[CV] max_depth=2, min_samples_leaf=3, n_estimators=200 ...............\n","[CV] max_depth=2, min_samples_leaf=3, n_estimators=200 ...............\n","[CV] max_depth=2, min_samples_leaf=5, n_estimators=100 ...............\n","[CV]  max_depth=2, min_samples_leaf=3, n_estimators=100, score=0.7342125285315749, total=   8.7s\n","[CV]  max_depth=2, min_samples_leaf=3, n_estimators=100, score=0.7398381060144487, total=   8.7s\n","[CV] max_depth=2, min_samples_leaf=5, n_estimators=100 ...............\n","[CV]  max_depth=2, min_samples_leaf=3, n_estimators=100, score=0.7347447073474471, total=   8.8s\n","[CV] max_depth=2, min_samples_leaf=5, n_estimators=100 ...............\n","[CV] max_depth=2, min_samples_leaf=5, n_estimators=150 ...............\n","[CV]  max_depth=2, min_samples_leaf=5, n_estimators=100, score=0.7353066258399252, total=   8.6s\n","[CV] max_depth=2, min_samples_leaf=5, n_estimators=150 ...............\n","[CV]  max_depth=2, min_samples_leaf=3, n_estimators=150, score=0.7396690846849784, total=  11.8s\n","[CV] max_depth=2, min_samples_leaf=5, n_estimators=150 ...............\n","[CV]  max_depth=2, min_samples_leaf=3, n_estimators=150, score=0.7385572750347991, total=  11.8s\n","[CV] max_depth=2, min_samples_leaf=5, n_estimators=200 ...............\n","[CV]  max_depth=2, min_samples_leaf=3, n_estimators=150, score=0.7421776165977904, total=  11.8s\n","[CV] max_depth=2, min_samples_leaf=5, n_estimators=200 ...............\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=10)]: Done   5 tasks      | elapsed:   12.2s\n"],"name":"stderr"},{"output_type":"stream","text":["[CV]  max_depth=2, min_samples_leaf=3, n_estimators=200, score=0.7427463024327163, total=  15.8s\n","[CV]  max_depth=2, min_samples_leaf=3, n_estimators=200, score=0.741035223026159, total=  15.8s\n","[CV] max_depth=2, min_samples_leaf=5, n_estimators=200 ...............\n","[CV] max_depth=2, min_samples_leaf=10, n_estimators=100 ..............\n","[CV]  max_depth=2, min_samples_leaf=3, n_estimators=200, score=0.7462933819266131, total=  15.8s\n","[CV] max_depth=2, min_samples_leaf=10, n_estimators=100 ..............\n","[CV]  max_depth=2, min_samples_leaf=5, n_estimators=100, score=0.738849611591167, total=   8.6s\n","[CV] max_depth=2, min_samples_leaf=10, n_estimators=100 ..............\n","[CV]  max_depth=2, min_samples_leaf=5, n_estimators=100, score=0.7332162862636903, total=   8.7s\n","[CV] max_depth=2, min_samples_leaf=10, n_estimators=150 ..............\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=10)]: Done  12 tasks      | elapsed:   18.0s\n"],"name":"stderr"},{"output_type":"stream","text":["[CV]  max_depth=2, min_samples_leaf=5, n_estimators=150, score=0.7393411648730798, total=  11.7s\n","[CV] max_depth=2, min_samples_leaf=10, n_estimators=150 ..............\n","[CV]  max_depth=2, min_samples_leaf=5, n_estimators=150, score=0.7414788904254453, total=  11.7s\n","[CV] max_depth=2, min_samples_leaf=10, n_estimators=150 ..............\n","[CV]  max_depth=2, min_samples_leaf=5, n_estimators=150, score=0.7435226601400963, total=  12.1s\n","[CV] max_depth=2, min_samples_leaf=10, n_estimators=200 ..............\n","[CV]  max_depth=2, min_samples_leaf=10, n_estimators=100, score=0.734958111195735, total=   8.1s\n","[CV] max_depth=2, min_samples_leaf=10, n_estimators=200 ..............\n","[CV]  max_depth=2, min_samples_leaf=10, n_estimators=100, score=0.734006172324631, total=   8.1s\n","[CV] max_depth=2, min_samples_leaf=10, n_estimators=200 ..............\n","[CV]  max_depth=2, min_samples_leaf=10, n_estimators=100, score=0.7396347269107593, total=   8.1s\n","[CV] max_depth=4, min_samples_leaf=3, n_estimators=100 ...............\n","[CV]  max_depth=2, min_samples_leaf=5, n_estimators=200, score=0.7425461044763995, total=  15.4s\n","[CV] max_depth=4, min_samples_leaf=3, n_estimators=100 ...............\n","[CV]  max_depth=2, min_samples_leaf=5, n_estimators=200, score=0.7402980317156745, total=  15.4s\n","[CV] max_depth=4, min_samples_leaf=3, n_estimators=100 ...............\n","[CV]  max_depth=2, min_samples_leaf=10, n_estimators=150, score=0.7391196630605336, total=  11.5s\n","[CV] max_depth=4, min_samples_leaf=3, n_estimators=150 ...............\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=10)]: Done  21 tasks      | elapsed:   30.0s\n"],"name":"stderr"},{"output_type":"stream","text":["[CV]  max_depth=2, min_samples_leaf=5, n_estimators=200, score=0.746132848043676, total=  14.9s\n","[CV] max_depth=4, min_samples_leaf=3, n_estimators=150 ...............\n","[CV]  max_depth=2, min_samples_leaf=10, n_estimators=150, score=0.7387980808327235, total=  12.0s\n","[CV]  max_depth=2, min_samples_leaf=10, n_estimators=150, score=0.7414914280888437, total=  11.9s\n","[CV] max_depth=4, min_samples_leaf=3, n_estimators=150 ...............\n","[CV] max_depth=4, min_samples_leaf=3, n_estimators=200 ...............\n","[CV]  max_depth=2, min_samples_leaf=10, n_estimators=200, score=0.7428757002516846, total=  15.4s\n","[CV] max_depth=4, min_samples_leaf=3, n_estimators=200 ...............\n","[CV]  max_depth=2, min_samples_leaf=10, n_estimators=200, score=0.7486941381311667, total=  15.2s\n","[CV] max_depth=4, min_samples_leaf=3, n_estimators=200 ...............\n","[CV]  max_depth=2, min_samples_leaf=10, n_estimators=200, score=0.7413587604290823, total=  15.4s\n","[CV] max_depth=4, min_samples_leaf=5, n_estimators=100 ...............\n","[CV]  max_depth=4, min_samples_leaf=3, n_estimators=100, score=0.7516725698543881, total=  25.0s\n","[CV] max_depth=4, min_samples_leaf=5, n_estimators=100 ...............\n","[CV]  max_depth=4, min_samples_leaf=3, n_estimators=100, score=0.7468752396288628, total=  26.0s\n","[CV]  max_depth=4, min_samples_leaf=3, n_estimators=100, score=0.7583205737770972, total=  26.0s\n","[CV] max_depth=4, min_samples_leaf=5, n_estimators=100 ...............\n","[CV] max_depth=4, min_samples_leaf=5, n_estimators=150 ...............\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=10)]: Done  30 tasks      | elapsed:   54.5s\n"],"name":"stderr"},{"output_type":"stream","text":["[CV]  max_depth=4, min_samples_leaf=3, n_estimators=150, score=0.7528616424675425, total=  33.8s\n","[CV] max_depth=4, min_samples_leaf=5, n_estimators=150 ...............\n","[CV]  max_depth=4, min_samples_leaf=5, n_estimators=100, score=0.7481335952848722, total=  25.2s\n","[CV] max_depth=4, min_samples_leaf=5, n_estimators=150 ...............\n","[CV]  max_depth=4, min_samples_leaf=3, n_estimators=150, score=0.7477381585949974, total=  34.4s\n","[CV] max_depth=4, min_samples_leaf=5, n_estimators=200 ...............\n","[CV]  max_depth=4, min_samples_leaf=3, n_estimators=150, score=0.7633889723914247, total=  34.5s\n","[CV] max_depth=4, min_samples_leaf=5, n_estimators=200 ...............\n","[CV]  max_depth=4, min_samples_leaf=5, n_estimators=100, score=0.7491718665742239, total=  24.0s\n","[CV] max_depth=4, min_samples_leaf=5, n_estimators=200 ...............\n","[CV]  max_depth=4, min_samples_leaf=3, n_estimators=200, score=0.7560584053206941, total=  42.1s\n","[CV] max_depth=4, min_samples_leaf=10, n_estimators=100 ..............\n","[CV]  max_depth=4, min_samples_leaf=5, n_estimators=100, score=0.7579048998310403, total=  23.6s\n","[CV] max_depth=4, min_samples_leaf=10, n_estimators=100 ..............\n","[CV]  max_depth=4, min_samples_leaf=3, n_estimators=200, score=0.7476741547538007, total=  42.9s\n","[CV] max_depth=4, min_samples_leaf=10, n_estimators=100 ..............\n","[CV]  max_depth=4, min_samples_leaf=3, n_estimators=200, score=0.763677515023804, total=  43.9s\n","[CV] max_depth=4, min_samples_leaf=10, n_estimators=150 ..............\n","[CV]  max_depth=4, min_samples_leaf=5, n_estimators=150, score=0.7560616624060732, total=  32.0s\n","[CV] max_depth=4, min_samples_leaf=10, n_estimators=150 ..............\n","[CV]  max_depth=4, min_samples_leaf=5, n_estimators=150, score=0.75077810673347, total=  31.7s\n","[CV] max_depth=4, min_samples_leaf=10, n_estimators=150 ..............\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=10)]: Done  41 tasks      | elapsed:  1.6min\n"],"name":"stderr"},{"output_type":"stream","text":["[CV]  max_depth=4, min_samples_leaf=5, n_estimators=150, score=0.7626850312673157, total=  30.9s\n","[CV] max_depth=4, min_samples_leaf=10, n_estimators=200 ..............\n","[CV]  max_depth=4, min_samples_leaf=10, n_estimators=100, score=0.752292140114411, total=  22.3s\n","[CV] max_depth=4, min_samples_leaf=10, n_estimators=200 ..............\n","[CV]  max_depth=4, min_samples_leaf=10, n_estimators=100, score=0.7493251060547629, total=  21.7s\n","[CV] max_depth=4, min_samples_leaf=10, n_estimators=200 ..............\n","[CV]  max_depth=4, min_samples_leaf=5, n_estimators=200, score=0.7570651757677873, total=  37.5s\n","[CV] max_depth=6, min_samples_leaf=3, n_estimators=100 ...............\n","[CV]  max_depth=4, min_samples_leaf=10, n_estimators=100, score=0.7593863544610415, total=  20.3s\n","[CV] max_depth=6, min_samples_leaf=3, n_estimators=100 ...............\n","[CV]  max_depth=4, min_samples_leaf=5, n_estimators=200, score=0.7497916193074183, total=  38.1s\n","[CV] max_depth=6, min_samples_leaf=3, n_estimators=100 ...............\n","[CV]  max_depth=4, min_samples_leaf=10, n_estimators=150, score=0.7533297405496959, total=  27.7s\n","[CV] max_depth=6, min_samples_leaf=3, n_estimators=150 ...............\n","[CV]  max_depth=4, min_samples_leaf=5, n_estimators=200, score=0.7614931237721022, total=  37.1s\n","[CV] max_depth=6, min_samples_leaf=3, n_estimators=150 ...............\n","[CV]  max_depth=4, min_samples_leaf=10, n_estimators=150, score=0.7508597630875048, total=  27.8s\n","[CV] max_depth=6, min_samples_leaf=3, n_estimators=150 ...............\n","[CV]  max_depth=4, min_samples_leaf=10, n_estimators=150, score=0.7608092026973423, total=  27.8s\n","[CV] max_depth=6, min_samples_leaf=3, n_estimators=200 ...............\n","[CV]  max_depth=4, min_samples_leaf=10, n_estimators=200, score=0.7563505988252346, total=  35.1s\n","[CV] max_depth=6, min_samples_leaf=3, n_estimators=200 ...............\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=10)]: Done  52 tasks      | elapsed:  2.2min\n"],"name":"stderr"},{"output_type":"stream","text":["[CV]  max_depth=4, min_samples_leaf=10, n_estimators=200, score=0.7504747436384352, total=  35.7s\n","[CV] max_depth=6, min_samples_leaf=3, n_estimators=200 ...............\n","[CV]  max_depth=4, min_samples_leaf=10, n_estimators=200, score=0.7593996716954584, total=  35.7s\n","[CV] max_depth=6, min_samples_leaf=5, n_estimators=100 ...............\n","[CV]  max_depth=6, min_samples_leaf=3, n_estimators=100, score=0.7488123067641957, total=  40.9s\n","[CV] max_depth=6, min_samples_leaf=5, n_estimators=100 ...............\n","[CV]  max_depth=6, min_samples_leaf=3, n_estimators=100, score=0.7579777154551657, total=  41.2s\n","[CV] max_depth=6, min_samples_leaf=5, n_estimators=100 ...............\n","[CV]  max_depth=6, min_samples_leaf=3, n_estimators=100, score=0.7595084389826554, total=  41.9s\n","[CV] max_depth=6, min_samples_leaf=5, n_estimators=150 ...............\n","[CV]  max_depth=6, min_samples_leaf=3, n_estimators=150, score=0.7563939098477461, total=  55.2s\n","[CV] max_depth=6, min_samples_leaf=5, n_estimators=150 ...............\n","[CV]  max_depth=6, min_samples_leaf=3, n_estimators=150, score=0.7463578632797908, total=  55.3s\n","[CV] max_depth=6, min_samples_leaf=5, n_estimators=150 ...............\n","[CV]  max_depth=6, min_samples_leaf=3, n_estimators=150, score=0.7553183319253514, total=  56.2s\n","[CV] max_depth=6, min_samples_leaf=5, n_estimators=200 ...............\n","[CV]  max_depth=6, min_samples_leaf=5, n_estimators=100, score=0.7553409868471072, total=  39.4s\n","[CV] max_depth=6, min_samples_leaf=5, n_estimators=200 ...............\n","[CV]  max_depth=6, min_samples_leaf=5, n_estimators=100, score=0.7505460570912104, total=  39.3s\n","[CV] max_depth=6, min_samples_leaf=5, n_estimators=200 ...............\n","[CV]  max_depth=6, min_samples_leaf=5, n_estimators=100, score=0.7591195457727309, total=  40.4s\n","[CV] max_depth=6, min_samples_leaf=10, n_estimators=100 ..............\n","[CV]  max_depth=6, min_samples_leaf=3, n_estimators=200, score=0.7550122978311098, total= 1.1min\n","[CV] max_depth=6, min_samples_leaf=10, n_estimators=100 ..............\n","[CV]  max_depth=6, min_samples_leaf=3, n_estimators=200, score=0.744965445493052, total= 1.2min\n","[CV] max_depth=6, min_samples_leaf=10, n_estimators=100 ..............\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=10)]: Done  65 tasks      | elapsed:  3.4min\n"],"name":"stderr"},{"output_type":"stream","text":["[CV]  max_depth=6, min_samples_leaf=5, n_estimators=150, score=0.7552142157970032, total=  54.1s\n","[CV] max_depth=6, min_samples_leaf=10, n_estimators=150 ..............\n","[CV]  max_depth=6, min_samples_leaf=3, n_estimators=200, score=0.7526881720430106, total= 1.2min\n","[CV] max_depth=6, min_samples_leaf=10, n_estimators=150 ..............\n","[CV]  max_depth=6, min_samples_leaf=5, n_estimators=150, score=0.7496474430342166, total=  54.4s\n","[CV] max_depth=6, min_samples_leaf=10, n_estimators=150 ..............\n","[CV]  max_depth=6, min_samples_leaf=5, n_estimators=150, score=0.7593771573214696, total=  56.4s\n","[CV] max_depth=6, min_samples_leaf=10, n_estimators=200 ..............\n","[CV]  max_depth=6, min_samples_leaf=10, n_estimators=100, score=0.7548967304321318, total=  41.0s\n","[CV] max_depth=6, min_samples_leaf=10, n_estimators=200 ..............\n","[CV]  max_depth=6, min_samples_leaf=10, n_estimators=100, score=0.7488937223430586, total=  39.8s\n","[CV] max_depth=6, min_samples_leaf=10, n_estimators=200 ..............\n","[CV]  max_depth=6, min_samples_leaf=5, n_estimators=200, score=0.7544345483122522, total= 1.2min\n","[CV] max_depth=8, min_samples_leaf=3, n_estimators=100 ...............\n","[CV]  max_depth=6, min_samples_leaf=10, n_estimators=100, score=0.7588696529772533, total=  41.1s\n","[CV] max_depth=8, min_samples_leaf=3, n_estimators=100 ...............\n","[CV]  max_depth=6, min_samples_leaf=5, n_estimators=200, score=0.7503896682253396, total= 1.2min\n","[CV] max_depth=8, min_samples_leaf=3, n_estimators=100 ...............\n","[CV]  max_depth=6, min_samples_leaf=5, n_estimators=200, score=0.7581199847153228, total= 1.2min\n","[CV] max_depth=8, min_samples_leaf=3, n_estimators=150 ...............\n","[CV]  max_depth=6, min_samples_leaf=10, n_estimators=150, score=0.7519109967456293, total=  54.3s\n","[CV] max_depth=8, min_samples_leaf=3, n_estimators=150 ...............\n","[CV]  max_depth=6, min_samples_leaf=10, n_estimators=150, score=0.7473362640637805, total=  53.7s\n","[CV] max_depth=8, min_samples_leaf=3, n_estimators=150 ...............\n","[CV]  max_depth=6, min_samples_leaf=10, n_estimators=150, score=0.7576684770136923, total=  56.5s\n","[CV] max_depth=8, min_samples_leaf=3, n_estimators=200 ...............\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=10)]: Done  78 tasks      | elapsed:  4.7min\n"],"name":"stderr"},{"output_type":"stream","text":["[CV]  max_depth=6, min_samples_leaf=10, n_estimators=200, score=0.7521258183460003, total= 1.1min\n","[CV] max_depth=8, min_samples_leaf=3, n_estimators=200 ...............\n","[CV]  max_depth=6, min_samples_leaf=10, n_estimators=200, score=0.745727602278612, total= 1.1min\n","[CV] max_depth=8, min_samples_leaf=3, n_estimators=200 ...............\n","[CV]  max_depth=6, min_samples_leaf=10, n_estimators=200, score=0.7580263860291314, total= 1.2min\n","[CV] max_depth=8, min_samples_leaf=5, n_estimators=100 ...............\n","[CV]  max_depth=8, min_samples_leaf=3, n_estimators=100, score=0.7479961045771218, total= 1.2min\n","[CV] max_depth=8, min_samples_leaf=5, n_estimators=100 ...............\n","[CV]  max_depth=8, min_samples_leaf=3, n_estimators=100, score=0.7460684206603561, total= 1.3min\n","[CV] max_depth=8, min_samples_leaf=5, n_estimators=100 ...............\n","[CV]  max_depth=8, min_samples_leaf=3, n_estimators=100, score=0.7551178061027425, total= 1.2min\n","[CV] max_depth=8, min_samples_leaf=5, n_estimators=150 ...............\n","[CV]  max_depth=8, min_samples_leaf=3, n_estimators=150, score=0.7480842199241128, total= 1.6min\n","[CV] max_depth=8, min_samples_leaf=5, n_estimators=150 ...............\n","[CV]  max_depth=8, min_samples_leaf=3, n_estimators=150, score=0.7420743930507089, total= 1.7min\n","[CV] max_depth=8, min_samples_leaf=5, n_estimators=150 ...............\n","[CV]  max_depth=8, min_samples_leaf=3, n_estimators=150, score=0.7527873894655901, total= 1.7min\n","[CV] max_depth=8, min_samples_leaf=5, n_estimators=200 ...............\n","[CV]  max_depth=8, min_samples_leaf=5, n_estimators=100, score=0.7512287334593573, total= 1.2min\n","[CV] max_depth=8, min_samples_leaf=5, n_estimators=200 ...............\n","[CV]  max_depth=8, min_samples_leaf=5, n_estimators=100, score=0.7436815030194587, total= 1.2min\n","[CV] max_depth=8, min_samples_leaf=5, n_estimators=200 ...............\n","[CV]  max_depth=8, min_samples_leaf=5, n_estimators=100, score=0.7562993030558322, total= 1.2min\n","[CV] max_depth=8, min_samples_leaf=10, n_estimators=100 ..............\n","[CV]  max_depth=8, min_samples_leaf=3, n_estimators=200, score=0.7462909118019833, total= 2.1min\n","[CV] max_depth=8, min_samples_leaf=10, n_estimators=100 ..............\n","[CV]  max_depth=8, min_samples_leaf=5, n_estimators=150, score=0.7484585097689623, total= 1.6min\n","[CV] max_depth=8, min_samples_leaf=10, n_estimators=100 ..............\n","[CV]  max_depth=8, min_samples_leaf=3, n_estimators=200, score=0.7397038237677743, total= 2.2min\n","[CV] max_depth=8, min_samples_leaf=10, n_estimators=150 ..............\n","[CV]  max_depth=8, min_samples_leaf=3, n_estimators=200, score=0.7474246470812667, total= 2.3min\n","[CV] max_depth=8, min_samples_leaf=10, n_estimators=150 ..............\n","[CV]  max_depth=8, min_samples_leaf=5, n_estimators=150, score=0.739454827509788, total= 1.8min\n","[CV] max_depth=8, min_samples_leaf=10, n_estimators=150 ..............\n","[CV]  max_depth=8, min_samples_leaf=5, n_estimators=150, score=0.7510076811924862, total= 1.8min\n","[CV] max_depth=8, min_samples_leaf=10, n_estimators=200 ..............\n","[CV]  max_depth=8, min_samples_leaf=10, n_estimators=100, score=0.7518314326712483, total= 1.3min\n","[CV] max_depth=8, min_samples_leaf=10, n_estimators=200 ..............\n","[CV]  max_depth=8, min_samples_leaf=10, n_estimators=100, score=0.7443558602190596, total= 1.2min\n","[CV] max_depth=8, min_samples_leaf=10, n_estimators=200 ..............\n","[CV]  max_depth=8, min_samples_leaf=5, n_estimators=200, score=0.7435878483258187, total= 2.2min\n","[CV]  max_depth=8, min_samples_leaf=10, n_estimators=100, score=0.7536919427653226, total= 1.3min\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=10)]: Done 100 out of 108 | elapsed:  8.3min remaining:   39.8s\n"],"name":"stderr"},{"output_type":"stream","text":["[CV]  max_depth=8, min_samples_leaf=5, n_estimators=200, score=0.7350896450786683, total= 2.2min\n","[CV]  max_depth=8, min_samples_leaf=5, n_estimators=200, score=0.7423432914440515, total= 2.2min\n","[CV]  max_depth=8, min_samples_leaf=10, n_estimators=150, score=0.7478584729981379, total= 1.5min\n","[CV]  max_depth=8, min_samples_leaf=10, n_estimators=150, score=0.7416586520677666, total= 1.5min\n","[CV]  max_depth=8, min_samples_leaf=10, n_estimators=150, score=0.7519226376303968, total= 1.2min\n","[CV]  max_depth=8, min_samples_leaf=10, n_estimators=200, score=0.7436909104444278, total= 1.3min\n","[CV]  max_depth=8, min_samples_leaf=10, n_estimators=200, score=0.7407270850232284, total= 1.3min\n","[CV]  max_depth=8, min_samples_leaf=10, n_estimators=200, score=0.7503991484832359, total= 1.2min\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=10)]: Done 108 out of 108 | elapsed:  9.3min finished\n"],"name":"stderr"},{"output_type":"stream","text":["Best parameters: \n","Unoptimized model\n","------\n","Accuracy score on testing data: 0.8630\n","F-score on testing data: 0.7395\n","\n","Optimized Model\n","------\n","Final accuracy score on the testing data: 0.8687\n","Final F-score on the testing data: 0.7480\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"J6nWAy9i8iG4","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jn1PvuWM3-eL","colab_type":"text"},"source":["### Question 5 - Final Model Evaluation\n","\n","* What is your optimized model's accuracy and F-score on the testing data? \n","* Are these scores better or worse than the unoptimized model? \n","* How do the results from your optimized model compare to the naive predictor benchmarks you found earlier in **Question 1**?_  \n","\n","**Note:** Fill in the table below with your results, and then provide discussion in the **Answer** box."]},{"cell_type":"code","metadata":{"id":"aK2J6c3_zJlN","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wGFyu2Af3-eM","colab_type":"text"},"source":["#### Results:\n","\n","|     Metric     | Unoptimized Model | Optimized Model |\n","| :------------: | :---------------: | :-------------: | \n","| Accuracy Score |      0.8630       |      0.8687     |\n","| F-score        |      0.7395       |      0.7480     |\n"]},{"cell_type":"code","metadata":{"id":"7m2gy5vVzN6r","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"u8-Yk-vs3-eO","colab_type":"text"},"source":["**Answer: **\n","\n","As it can be seen above the optimized model performs slightly better than the unoptimized one. If we compare to results to the Naive Predictor, we notice the Gradient Boosting Classifier performs significantly better than the Naive Predictor.\n"]},{"cell_type":"markdown","metadata":{"id":"mc5X3mFp3-eP","colab_type":"text"},"source":["----\n","## Feature Importance\n","\n","An important task when performing supervised learning on a dataset like the census data we study here is determining which features provide the most predictive power. By focusing on the relationship between only a few crucial features and the target label we simplify our understanding of the phenomenon, which is most always a useful thing to do. In the case of this project, that means we wish to identify a small number of features that most strongly predict whether an individual makes at most or more than \\$50,000.\n","\n","Choose a scikit-learn classifier (e.g., adaboost, random forests) that has a `feature_importance_` attribute, which is a function that ranks the importance of features according to the chosen classifier.  In the next python cell fit this classifier to training set and use this attribute to determine the top 5 most important features for the census dataset."]},{"cell_type":"markdown","metadata":{"id":"1IDUDkK43-eR","colab_type":"text"},"source":["### Question 6 - Feature Relevance Observation\n","When **Exploring the Data**, it was shown there are thirteen available features for each individual on record in the census data. Of these thirteen records, which five features do you believe to be most important for prediction, and in what order would you rank them and why?"]},{"cell_type":"markdown","metadata":{"id":"rG2INslR3-eT","colab_type":"text"},"source":["**Answer:**\n","- **Capital-gain**\n","  If the capital-gain is high and the capital-loss is low, we can expect the person to make a lot of money.\n","  In my understanding capital-gain-capital-loss > 50k should be a clear indicator for a person earning more than \n","  50k.\n","- **Capital-loss**\n","  See Capital-gain for explanation. Adding both features can probabily boost the performance.\n","- **Hours-per-week**\n","  On average people who work hours a week will earn more than people who work less. \n","- **Education Level**\n","  People with a good education are more likely to get a job that is well payed.\n","- **Age**\n","  Young people usually earn less or have no income at all."]},{"cell_type":"markdown","metadata":{"id":"eGVMJ6Af3-eU","colab_type":"text"},"source":["### Implementation - Extracting Feature Importance\n","Choose a `scikit-learn` supervised learning algorithm that has a `feature_importance_` attribute availble for it. This attribute is a function that ranks the importance of each feature when making predictions based on the chosen algorithm.\n","\n","In the code cell below, you will need to implement the following:\n"," - Import a supervised learning model from sklearn if it is different from the three used earlier.\n"," - Train the supervised model on the entire training set.\n"," - Extract the feature importances using `'.feature_importances_'`."]},{"cell_type":"code","metadata":{"id":"GC_9Hcpa3-eV","colab_type":"code","outputId":"07a7917d-86d3-4521-c135-bf1c2e61ceb1","colab":{}},"source":["# Train the supervised model on the training set using .fit(X_train, y_train)\n","model = GradientBoostingClassifier(random_state=0)\n","model.fit(X_train, y_train)\n","\n","# Extract the feature importances using .feature_importances_ \n","# Note (Reviewer Feedback): \n","# - Re-Use best_clf next time!\n","# - Check out the feature_selection module in sklearn. SelectKBest and SelectPercentile.\n","\n","importances = model.feature_importances_\n","\n","\n","# Plot\n","vs.feature_plot(importances, X_train, y_train)"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nPffcc8yaNYtRo0YB8MUXXzBv3jxatWrFddddx0svvcR2223HBx98wCeffFLtbfbr1w8INW4TJ07k\ntNNOK1+2Zs2aTdJ37dqV6dOns2LFCtauXUuTJk3YZ599mD9/PhMnTuSqq64C4Pnnn2f27Nnl6335\n5ZcsX768Ql6TJk3iySefBOCss87i6quvLl/WrVu38qCwU6dOLFy4sLyfociWyB54oNby9vPOq7W8\nZVPFCgA/AFonplvFeUmLgFfdfS3wrpm9TQgIpxaniCJSV9ydO+64g2OOOabC/OHDh1NWVsa0adNo\n0KABbdq0yflcuPr167Nhw4by6ew0O+64IwAbNmygefPmmwSg2Ro3bky7du24//776dKlCwDdu3dn\n7NixLF68mP333788v8mTJ9OwYcPqv2lghx12KP+/Xr16rFu3brPyERGprmI1AU8F2plZWzPbHjgD\nGJOV5klC7R9mtguhSfidIpVPROrQMcccw1//+lfWrl0LwNtvv82KFSv44osv2HXXXWnQoAHjxo3j\nvffeA6Bp06YsW7asfP29996b2bNns2bNGpYuXcoLL7yQczvf+MY3aNu2LSNHjgRC4Dlz5sycaXv2\n7MmQIUPo0aMHAD169OD222+ne/fu5c+nO/roo7njjjvK18kVWHbv3p3Ro0cDMGLEiIL2R/b7ExGp\naUWpAXT3dWY2EHiW8BiY+939TTO7ESh19zFx2dFmNhtYD1zj7kuKUT6RtCrksS3FcMEFF7Bw4UK6\ndOlS/hiWJ598krPPPpsTTjiBDh06UFJSwgEHHACEPn29evXi4IMP5thjj+W2227j9NNP5+CDD6Zt\n27Z07tw577YeeeQRLr74Ym666SbWrl3LGWecwSGHHLJJul69enH77beXB4BdunRh0aJFFfr5DR06\nlEsvvZSOHTuybt06evfuzd13310hnyFDhnDOOedw880307dvX5o1a1bl/hgwYAB9+/Yt7wsoIlLT\nzH3L+ALYHCUlJV5aWlrXxRDZasyZM4cDDzywrouRKitXrqRRo0aYGSNGjOCxxx4rH80sVdM5u2VR\nH8Atn5lNc/eSqtJtSYNARES2OdOmTWPgwIG4O82bN+f++++v6yKJiCgAFBGpTYcddljefoYiInVF\nvwUsIiIikjIKAEVERERSRgGgiIiISMooABQRERFJGQ0CEUmxmn6kQyGPcfj444+54oormDp1Ks2b\n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\nI49w/fXX061bN/baay8OOOCAvNsaOnQol156KR07dmTdunX07t27fOBMUq9evbjyyivLy7THHnuw\nfv36CqOWf/WrX3HFFVfQsWNHNmzYQNu2bTcJPn/9619z5pln8tBDD9GjRw923313mjZtWh7s5tK/\nf38uuugiGjVqxKRJk9QPUKQILHMntzUqKSnx0tLSui6GyFZjzpw5HHjggXVdDNmGrVmzhnr16lG/\nfn0mTZrExRdfnLfWsRA6Z7csNf3s0KRi35Buq8xsmrvnf+hppBpAERGpMf/97385/fTT2bBhA9tv\nvz333ntvXRdJRHJQACgiIjWmXbt2OfsGisiWRYNARFJma+72Iemic1Wk9igAFEmRhg0bsmTJEn2x\nyhbP3VmyZEmVj68Rkc2jJmCRFGnVqhWLFi2irKysrosiUqWGDRvSqlWrui6GyDZJAaBIijRo0IC2\nbdvWdTFERKSOqQlYREREJGUUAIqIiIikjAJAERERkZRRACgiIiKSMgoARURERFJGAaCIiIhIyigA\nFBEREUkZBYAiIiIiKaMAUERERCRlFACKiIiIpIwCQBEREZGUUQAoIiIikjIKAEVERERSRgGgiIiI\nSMooABQRERFJmaIFgGbW18zeMrP5ZjYox/L+ZlZmZjPi64JilU1EREQkTeoXYyNmVg+4E/gesAiY\namZj3H12VtJ/uPvAYpRJREREJK2KVQPYDZjv7u+4+1fACOCkIm1bRERERBKKFQDuBbyfmF4U52U7\nxcxmmdkoM2udKyMzG2BmpWZWWlZWVhtlFREREdmmFaUJuED/Bzzm7mvM7CfAA8CR2YncfRgwDKCk\npMSLW0QREakOe+CBWsvbzzuv1vIW2dYVqwbwAyBZo9cqzivn7kvcfU2cvA84tEhlExEREUmVYgWA\nU4F2ZtbWzLYHzgDGJBOY2R6JyROBOUUqm4iIiEiqFKUJ2N3XmdlA4FmgHnC/u79pZjcCpe4+BrjM\nzE4E1gGfAf2LUTYRERGRtClaH0B3HwuMzZp3feL/a4Fri1UeERERkbTSL4GIiIiIpIwCQBEREZGU\nUQAoIiIikjIKAEVERERSRgGgiIiISMooABQRERFJGQWAIiIiIimjAFBEREQkZRQAioiIiKSMAkAR\nERGRlFEAKCIiIpIyCgBFREREUkYBoIiIiEjKKAAUERERSRkFgCIiIiIpowBQREREJGUUAIqIiIik\n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\nJbIHHqjV/P2882o1fxERkbpS0E/BiYiIiMi2QwGgiIiISMooABQRERFJGQWAIiIiIimjAFBEREQk\nZRQAioiIiKSMAkARERGRlFEAKCIiIpIyCgBFREREUkYBoIiIiEjKKAAUERERSRkFgCIiIiIpowBQ\nREREJGUUAIqIiIikjAJAERERkZRRACgiIiKSMgoARURERFJGAaCIiIhIyigAFBEREUkZBYAiIiIi\nKaMAUERERCRlFACKiIiIpIwCQBEREZGUUQAoIiIikjJFCwDNrK+ZvWVm881sUI7lPzOz2WY2y8xe\nMLO9i1U2ERERkTQpSgBoZvWAO4FjgYOAM83soKxk04ESd+8IjAL+UIyyiYiIiKRNsWoAuwHz3f0d\nd/8KGAGclEzg7uPcfWWcnAy0KlLZRERERFKlWAHgXsD7ielFcV4+5wP/yrXAzAaYWamZlZaVldVg\nEUVERETSYYsbBGJm5wAlwG25lrv7MHcvcfeSli1bFrdwIiIiItuA+kXazgdA68R0qzivAjM7CvgF\ncLi7rylS2URERERSpVg1gFOBdmbW1sy2B84AxiQTmFln4B7gRHdfXKRyiYiIiKROUQJAd18HDASe\nBeYAj7v7m2Z2o5mdGJPdBjQBRprZDDMbkyc7EREREfkaitUEjLuPBcZmzbs+8f9RxSqLiIiISJpt\ncYNARERERKR2KQAUERERSRkFgCIiIiIpowBQREREJGUUAIqIiIikjAJAERERkZRRACgiIiKSMgoA\nRURERFJGAaCIiIhIyigAFBEREUkZBYAiIiIiKaMAUERERCRlFACKiIiIpIwCQBEREZGUUQAoIiIi\nkjIKAEVERERSRgGgiIiISMooABQRERFJGQWAIiIiIimjAFBEREQkZRQAioiIiKSMAkARERGRlFEA\nKCIiIpIyCgBFREREUqZ+XRegmOyBB2ox9/61mPeWw8/zui6CiIiIfE2qARQRERFJGQWAIiIiIimT\nqiZgkeqwB6yui1AUatYXEUkf1QCKiIiIpIwCQBEREZGUUROwiKRCWpr0Qc36IlI11QCKiIiIpIxq\nAEVEZKuUllpd1ehKbVANoIiIiEjKKAAUERERSRkFgCIiIiIpU7QA0Mz6mtlbZjbfzAblWN7bzF4z\ns3VmdmqxyiUiIiKSNkUJAM2sHnAncCxwEHCmmR2Uley/QH/g0WKUSURERCStijUKuBsw393fATCz\n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\n","text/plain":["<matplotlib.figure.Figure at 0x111bd7eb8>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"jw9keJ_f3-eY","colab_type":"text"},"source":["### Question 7 - Extracting Feature Importance\n","\n","Observe the visualization created above which displays the five most relevant features for predicting if an individual makes at most or above \\$50,000.  \n","* How do these five features compare to the five features you discussed in **Question 6**?\n","* If you were close to the same answer, how does this visualization confirm your thoughts? \n","* If you were not close, why do you think these features are more relevant?"]},{"cell_type":"markdown","metadata":{"id":"O6bPUBMb3-eY","colab_type":"text"},"source":["**Answer:**\n","\n","My assumptions were partially correct. For example, the chart confirms that capital-gain, capital-loss and age are important features. However, it turned out that capital-gain and capital-loss are not as important as I expected them to be. Surprisingly, the marital status plays an important role as well. Maybe it's because of the fact that people who are in a relationship tend to have more money if both spouses work for a company and their expenses divide evenly. <br/>\n","Finally, there's the education number which seems to be the most important features. Maybe it's because of the fact the education number gives us some information about whether the person studies or not. Furthermore, it might incorporate some knowledge about the person's age."]},{"cell_type":"code","metadata":{"id":"sF0uHbO60eX4","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DCCXeMKH3-eZ","colab_type":"text"},"source":["### Feature Selection\n","How does a model perform if we only use a subset of all the available features in the data? With less features required to train, the expectation is that training and prediction time is much lower — at the cost of performance metrics. From the visualization above, we see that the top five most important features contribute more than half of the importance of **all** features present in the data. This hints that we can attempt to *reduce the feature space* and simplify the information required for the model to learn. The code cell below will use the same optimized model you found earlier, and train it on the same training set *with only the top five important features*. "]},{"cell_type":"code","metadata":{"id":"SpB-Jb4282pc","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"FsamprwZ3-ea","colab_type":"code","outputId":"7784f0c4-5a3f-48f5-881b-ea2ecbe32ae4","colab":{}},"source":["# Import functionality for cloning a model\n","from sklearn.base import clone\n","\n","# Reduce the feature space\n","X_train_reduced = X_train[X_train.columns.values[(np.argsort(importances)[::-1])[:5]]]\n","X_test_reduced = X_test[X_test.columns.values[(np.argsort(importances)[::-1])[:5]]]\n","\n","# Train on the \"best\" model found from grid search earlier\n","clf = (clone(best_clf)).fit(X_train_reduced, y_train)\n","\n","# Make new predictions\n","reduced_predictions = clf.predict(X_test_reduced)\n","\n","# Report scores from the final model using both versions of data\n","print(\"Final Model trained on full data\\n------\")\n","print(\"Accuracy on testing data: {:.4f}\".format(accuracy_score(y_test, best_predictions)))\n","print(\"F-score on testing data: {:.4f}\".format(fbeta_score(y_test, best_predictions, beta = 0.5)))\n","print(\"\\nFinal Model trained on reduced data\\n------\")\n","print(\"Accuracy on testing data: {:.4f}\".format(accuracy_score(y_test, reduced_predictions)))\n","print(\"F-score on testing data: {:.4f}\".format(fbeta_score(y_test, reduced_predictions, beta = 0.5)))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Final Model trained on full data\n","------\n","Accuracy on testing data: 0.8687\n","F-score on testing data: 0.7480\n","\n","Final Model trained on reduced data\n","------\n","Accuracy on testing data: 0.8585\n","F-score on testing data: 0.7241\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"lz5Y0RRU3-ed","colab_type":"text"},"source":["### Question 8 - Effects of Feature Selection\n","\n","* How does the final model's F-score and accuracy score on the reduced data using only five features compare to those same scores when all features are used?\n","* If training time was a factor, would you consider using the reduced data as your training set?"]},{"cell_type":"markdown","metadata":{"id":"uFULycM33-ed","colab_type":"text"},"source":["**Answer:**\n","\n","The accuracy / f-score of the model decreases. So, obviously, the removed features do still contain important information that is important for an accuracy classification. Since the training time can still be done in a reasonable time, I wouldn't reduce the number of features. However, if it was, I would suggest to do it as the loss of accuracy is not too high."]}]}